{
    "sourceFile": "src/components/EventForm.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 24,
            "patches": [
                {
                    "date": 1748256871445,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748257229168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n         date_time: eventDateTime,\r\n         location: values.location,\r\n         category: values.category,\r\n         image_url: imageUrl,\r\n-        user_id: user.id, // Changed from 'id' to 'user_id' for better clarity\r\n+        user_id: user.id,\r\n       };\r\n \r\n       console.log('Submitting data:', submissionData);\r\n \r\n@@ -130,10 +130,8 @@\n   };\r\n \r\n   return (\r\n     <div className=\"event-form-container\">\r\n-     \r\n-\r\n       <Form \r\n         key={formKey}\r\n         form={form} \r\n         layout=\"vertical\"\r\n"
                },
                {
                    "date": 1748257242907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n       console.log('Submitting data:', submissionData);\r\n \r\n       // Submit form data\r\n       const { error } = await supabase\r\n-        .from('events') // Changed from 'event-form-request' to 'events'\r\n+        .from('events')\r\n         .insert([submissionData]);\r\n \r\n       if (error) throw error;\r\n \r\n"
                },
                {
                    "date": 1748257249110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,9 +110,9 @@\n       console.log('Submitting data:', submissionData);\r\n \r\n       // Submit form data\r\n       const { error } = await supabase\r\n-        .from('events')\r\n+        .from('event-form-request')\r\n         .insert([submissionData]);\r\n \r\n       if (error) throw error;\r\n \r\n"
                },
                {
                    "date": 1748257713669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,32 +47,33 @@\n \r\n   const uploadImageToSupabase = async (file) => {\r\n     if (!file) return null;\r\n     \r\n-    const fileExt = file.name.split('.').pop();\r\n-    const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 9)}.${fileExt}`;\r\n-    const filePath = `${user.id}/${fileName}`;\r\n+    try {\r\n+      const fileExt = file.name.split('.').pop();\r\n+      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 9)}.${fileExt}`;\r\n+      const filePath = `event-images/${user.id}/${fileName}`;\r\n \r\n-    try {\r\n-      const { data, error } = await supabase\r\n+      // Upload the file\r\n+      const { data, error: uploadError } = await supabase\r\n         .storage\r\n         .from('event-images')\r\n         .upload(filePath, file, {\r\n           cacheControl: '3600',\r\n           upsert: false\r\n         });\r\n \r\n-      if (error) throw error;\r\n+      if (uploadError) throw uploadError;\r\n \r\n-      // Get public URL\r\n+      // Get the public URL\r\n       const { data: { publicUrl } } = supabase\r\n         .storage\r\n         .from('event-images')\r\n         .getPublicUrl(filePath);\r\n \r\n       return publicUrl;\r\n     } catch (error) {\r\n-      console.error('Upload error:', error);\r\n+      console.error('Error uploading image:', error);\r\n       message.error('Failed to upload image. Please try again.');\r\n       throw error;\r\n     }\r\n   };\r\n@@ -89,13 +90,12 @@\n         .hour(values.time.hour())\r\n         .minute(values.time.minute())\r\n         .toISOString();\r\n \r\n-      // Upload image if exists\r\n+      // Upload image first if exists\r\n       let imageUrl = null;\r\n       if (imageFile) {\r\n         imageUrl = await uploadImageToSupabase(imageFile);\r\n-        console.log('Image URL:', imageUrl);\r\n       }\r\n \r\n       const submissionData = {\r\n         title: values.title,\r\n@@ -106,10 +106,8 @@\n         image_url: imageUrl,\r\n         user_id: user.id,\r\n       };\r\n \r\n-      console.log('Submitting data:', submissionData);\r\n-\r\n       // Submit form data\r\n       const { error } = await supabase\r\n         .from('event-form-request')\r\n         .insert([submissionData]);\r\n"
                },
                {
                    "date": 1748257992272,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,33 +47,32 @@\n \r\n   const uploadImageToSupabase = async (file) => {\r\n     if (!file) return null;\r\n     \r\n+    const fileExt = file.name.split('.').pop();\r\n+    const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 9)}.${fileExt}`;\r\n+    const filePath = `${user.id}/${fileName}`;\r\n+\r\n     try {\r\n-      const fileExt = file.name.split('.').pop();\r\n-      const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 9)}.${fileExt}`;\r\n-      const filePath = `event-images/${user.id}/${fileName}`;\r\n-\r\n-      // Upload the file\r\n-      const { data, error: uploadError } = await supabase\r\n+      const { data, error } = await supabase\r\n         .storage\r\n         .from('event-images')\r\n         .upload(filePath, file, {\r\n           cacheControl: '3600',\r\n           upsert: false\r\n         });\r\n \r\n-      if (uploadError) throw uploadError;\r\n+      if (error) throw error;\r\n \r\n-      // Get the public URL\r\n+      // Get public URL\r\n       const { data: { publicUrl } } = supabase\r\n         .storage\r\n         .from('event-images')\r\n         .getPublicUrl(filePath);\r\n \r\n       return publicUrl;\r\n     } catch (error) {\r\n-      console.error('Error uploading image:', error);\r\n+      console.error('Upload error:', error);\r\n       message.error('Failed to upload image. Please try again.');\r\n       throw error;\r\n     }\r\n   };\r\n@@ -90,12 +89,13 @@\n         .hour(values.time.hour())\r\n         .minute(values.time.minute())\r\n         .toISOString();\r\n \r\n-      // Upload image first if exists\r\n+      // Upload image if exists\r\n       let imageUrl = null;\r\n       if (imageFile) {\r\n         imageUrl = await uploadImageToSupabase(imageFile);\r\n+        console.log('Image URL:', imageUrl);\r\n       }\r\n \r\n       const submissionData = {\r\n         title: values.title,\r\n@@ -103,14 +103,16 @@\n         date_time: eventDateTime,\r\n         location: values.location,\r\n         category: values.category,\r\n         image_url: imageUrl,\r\n-        user_id: user.id,\r\n+        user_id: user.id, // Changed from 'id' to 'user_id' for better clarity\r\n       };\r\n \r\n+      console.log('Submitting data:', submissionData);\r\n+\r\n       // Submit form data\r\n       const { error } = await supabase\r\n-        .from('event-form-request')\r\n+        .from('events') // Changed from 'event-form-request' to 'events'\r\n         .insert([submissionData]);\r\n \r\n       if (error) throw error;\r\n \r\n@@ -128,8 +130,10 @@\n   };\r\n \r\n   return (\r\n     <div className=\"event-form-container\">\r\n+      <h2 style={{ marginBottom: 24 }}>Create New Event</h2>\r\n+\r\n       <Form \r\n         key={formKey}\r\n         form={form} \r\n         layout=\"vertical\"\r\n"
                },
                {
                    "date": 1748258098614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n                   status: 'done',\r\n                   originFileObj: imageFile\r\n                 }] : []}\r\n               >\r\n-                <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n+                <Button icon={<UploadOutlined />}>` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` `` to upload</Button>\r\n               </Upload>\r\n             </Form.Item>\r\n           </Col>\r\n           \r\n"
                },
                {
                    "date": 1748258112703,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,246 @@\n+import React, { useState, useContext } from 'react';\r\n+import { Form, message, Row, Col, DatePicker, TimePicker, Upload, Button } from 'antd';\r\n+import { UploadOutlined } from '@ant-design/icons';\r\n+import FormInput from './FormInput';\r\n+import FormButton from './FormButton';\r\n+import supabase from '../services/supabaseClient';\r\n+import { AuthContext } from '../context/AuthContext';\r\n+import dayjs from 'dayjs';\r\n+\r\n+const EventForm = () => {\r\n+  const [form] = Form.useForm();\r\n+  const { loading, setLoading, user } = useContext(AuthContext);\r\n+  const [formKey, setFormKey] = useState(0);\r\n+  const [imageFile, setImageFile] = useState(null);\r\n+\r\n+  const categories = [\r\n+    { value: 'tech', label: 'Technology' },\r\n+    { value: 'education', label: 'Education' },\r\n+    { value: 'entertainment', label: 'Entertainment' },\r\n+    { value: 'business', label: 'Business' },\r\n+    { value: 'health', label: 'Health & Wellness' },\r\n+    { value: 'sports', label: 'Sports' },\r\n+    { value: 'other', label: 'Other' },\r\n+  ];\r\n+\r\n+  const beforeUpload = (file) => {\r\n+    const isImage = file.type.startsWith('image/');\r\n+    if (!isImage) {\r\n+      message.error('You can only upload image files!');\r\n+      return Upload.LIST_IGNORE;\r\n+    }\r\n+    const isLt5MB = file.size / 1024 / 1024 < 5;\r\n+    if (!isLt5MB) {\r\n+      message.error('Image must be smaller than 5MB!');\r\n+      return Upload.LIST_IGNORE;\r\n+    }\r\n+    return false; // Prevent automatic upload\r\n+  };\r\n+\r\n+  const handleImageChange = (info) => {\r\n+    if (info.file.status === 'done') {\r\n+      setImageFile(info.file.originFileObj);\r\n+    } else if (info.file.status === 'removed') {\r\n+      setImageFile(null);\r\n+    }\r\n+  };\r\n+\r\n+  const uploadImageToSupabase = async (file) => {\r\n+    if (!file) return null;\r\n+    \r\n+    const fileExt = file.name.split('.').pop();\r\n+    const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 9)}.${fileExt}`;\r\n+    const filePath = `${user.id}/${fileName}`;\r\n+\r\n+    try {\r\n+      const { data, error } = await supabase\r\n+        .storage\r\n+        .from('event-images')\r\n+        .upload(filePath, file, {\r\n+          cacheControl: '3600',\r\n+          upsert: false\r\n+        });\r\n+\r\n+      if (error) throw error;\r\n+\r\n+      // Get public URL\r\n+      const { data: { publicUrl } } = supabase\r\n+        .storage\r\n+        .from('event-images')\r\n+        .getPublicUrl(filePath);\r\n+\r\n+      return publicUrl;\r\n+    } catch (error) {\r\n+      console.error('Upload error:', error);\r\n+      message.error('Failed to upload image. Please try again.');\r\n+      throw error;\r\n+    }\r\n+  };\r\n+\r\n+  const handleSubmit = async () => {\r\n+    try {\r\n+      if (loading) return;\r\n+      setLoading(true);\r\n+      \r\n+      const values = await form.validateFields();\r\n+      \r\n+      // Combine date and time\r\n+      const eventDateTime = dayjs(values.date)\r\n+        .hour(values.time.hour())\r\n+        .minute(values.time.minute())\r\n+        .toISOString();\r\n+\r\n+      // Upload image if exists\r\n+      let imageUrl = null;\r\n+      if (imageFile) {\r\n+        imageUrl = await uploadImageToSupabase(imageFile);\r\n+        console.log('Image URL:', imageUrl);\r\n+      }\r\n+\r\n+      const submissionData = {\r\n+        title: values.title,\r\n+        description: values.description,\r\n+        date_time: eventDateTime,\r\n+        location: values.location,\r\n+        category: values.category,\r\n+        image_url: imageUrl,\r\n+        user_id: user.id, // Changed from 'id' to 'user_id' for better clarity\r\n+      };\r\n+\r\n+      console.log('Submitting data:', submissionData);\r\n+\r\n+      // Submit form data\r\n+      const { error } = await supabase\r\n+        .from('events') // Changed from 'event-form-request' to 'events'\r\n+        .insert([submissionData]);\r\n+\r\n+      if (error) throw error;\r\n+\r\n+      message.success('Event created successfully!');\r\n+      form.resetFields();\r\n+      setImageFile(null);\r\n+      setFormKey(prev => prev + 1);\r\n+\r\n+    } catch (error) {\r\n+      console.error('Submission error:', error);\r\n+      message.error(error.message || 'Failed to create event. Please try again.');\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"event-form-container\">\r\n+      <h2 style={{ marginBottom: 24 }}>Create New Event</h2>\r\n+\r\n+      <Form \r\n+        key={formKey}\r\n+        form={form} \r\n+        layout=\"vertical\"\r\n+      >\r\n+        <Row gutter={16}>\r\n+          <Col span={12}>\r\n+            <FormInput \r\n+              label=\"Title\" \r\n+              name=\"title\" \r\n+              rules={[{ required: true, message: 'Please enter event title' }]} \r\n+              type=\"text\" \r\n+            />\r\n+            \r\n+            <FormInput \r\n+              label=\"Description\" \r\n+              name=\"description\" \r\n+              rules={[{ required: true, message: 'Please enter event description' }]} \r\n+              type=\"textarea\" \r\n+              rows={4}\r\n+            />\r\n+\r\n+            <Form.Item\r\n+              label=\"Event Image\"\r\n+              name=\"image\"\r\n+              rules={[{ required: false }]}\r\n+            >\r\n+              <Upload\r\n+                name=\"image\"\r\n+                listType=\"picture\"\r\n+                beforeUpload={beforeUpload}\r\n+                onChange={handleImageChange}\r\n+                maxCount={1}\r\n+                accept=\"image/*\"\r\n+                fileList={imageFile ? [{\r\n+                  uid: '1',\r\n+                  name: imageFile.name,\r\n+                  status: 'done',\r\n+                  originFileObj: imageFile\r\n+                }] : []}\r\n+              >\r\n+                <Button icon={<UploadOutlined />}>`Click` to upload</Button>\r\n+              </Upload>\r\n+            </Form.Item>\r\n+          </Col>\r\n+          \r\n+          <Col span={12}>\r\n+            <Form.Item\r\n+              label=\"Date\"\r\n+              name=\"date\"\r\n+              rules={[{ required: true, message: 'Please select event date' }]}\r\n+            >\r\n+              <DatePicker style={{ width: '100%' }} />\r\n+            </Form.Item>\r\n+            \r\n+            <Form.Item\r\n+              label=\"Time\"\r\n+              name=\"time\"\r\n+              rules={[{ required: true, message: 'Please select event time' }]}\r\n+            >\r\n+              <TimePicker style={{ width: '100%' }} format=\"HH:mm\" />\r\n+            </Form.Item>\r\n+            \r\n+            <FormInput \r\n+              label=\"Location\" \r\n+              name=\"location\" \r\n+              rules={[{ required: true, message: 'Please enter event location' }]} \r\n+              type=\"text\" \r\n+            />\r\n+            \r\n+            <FormInput \r\n+              label=\"Category\" \r\n+              name=\"category\" \r\n+              rules={[{ required: true, message: 'Please select event category' }]} \r\n+              type=\"select\" \r\n+              options={categories}\r\n+            />\r\n+          </Col>\r\n+        </Row>\r\n+\r\n+        <Form.Item style={{ marginTop: 24 }}>\r\n+          <FormButton \r\n+            type=\"primary\" \r\n+            style={{ background: 'black' }}\r\n+            onClick={handleSubmit}\r\n+            loading={loading}\r\n+          >\r\n+            Create Event\r\n+          </FormButton>\r\n+        </Form.Item>\r\n+      </Form>\r\n+\r\n+      <style jsx>{`\r\n+        .event-form-container {\r\n+          max-width: 800px;\r\n+          margin: 0 auto;\r\n+          padding: 24px;\r\n+          background: #fff;\r\n+          border-radius: 8px;\r\n+          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n+        }\r\n+        .ant-upload.ant-upload-select-picture-card {\r\n+          width: 100%;\r\n+          margin-right: 0;\r\n+        }\r\n+      `}</style>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default EventForm;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748258201656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,8 +50,9 @@\n     \r\n     const fileExt = file.name.split('.').pop();\r\n     const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 9)}.${fileExt}`;\r\n     const filePath = `${user.id}/${fileName}`;\r\n+    console.log('Uploading file to:', filePath);\r\n \r\n     try {\r\n       const { data, error } = await supabase\r\n         .storage\r\n@@ -173,9 +174,9 @@\n                   status: 'done',\r\n                   originFileObj: imageFile\r\n                 }] : []}\r\n               >\r\n-                <Button icon={<UploadOutlined />}>`Click` to upload</Button>\r\n+                <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n               </Upload>\r\n             </Form.Item>\r\n           </Col>\r\n           \r\n@@ -242,251 +243,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default EventForm;\n-import React, { useState, useContext } from 'react';\r\n-import { Form, message, Row, Col, DatePicker, TimePicker, Upload, Button } from 'antd';\r\n-import { UploadOutlined } from '@ant-design/icons';\r\n-import FormInput from './FormInput';\r\n-import FormButton from './FormButton';\r\n-import supabase from '../services/supabaseClient';\r\n-import { AuthContext } from '../context/AuthContext';\r\n-import dayjs from 'dayjs';\r\n-\r\n-const EventForm = () => {\r\n-  const [form] = Form.useForm();\r\n-  const { loading, setLoading, user } = useContext(AuthContext);\r\n-  const [formKey, setFormKey] = useState(0);\r\n-  const [imageFile, setImageFile] = useState(null);\r\n-\r\n-  const categories = [\r\n-    { value: 'tech', label: 'Technology' },\r\n-    { value: 'education', label: 'Education' },\r\n-    { value: 'entertainment', label: 'Entertainment' },\r\n-    { value: 'business', label: 'Business' },\r\n-    { value: 'health', label: 'Health & Wellness' },\r\n-    { value: 'sports', label: 'Sports' },\r\n-    { value: 'other', label: 'Other' },\r\n-  ];\r\n-\r\n-  const beforeUpload = (file) => {\r\n-    const isImage = file.type.startsWith('image/');\r\n-    if (!isImage) {\r\n-      message.error('You can only upload image files!');\r\n-      return Upload.LIST_IGNORE;\r\n-    }\r\n-    const isLt5MB = file.size / 1024 / 1024 < 5;\r\n-    if (!isLt5MB) {\r\n-      message.error('Image must be smaller than 5MB!');\r\n-      return Upload.LIST_IGNORE;\r\n-    }\r\n-    return false; // Prevent automatic upload\r\n-  };\r\n-\r\n-  const handleImageChange = (info) => {\r\n-    if (info.file.status === 'done') {\r\n-      setImageFile(info.file.originFileObj);\r\n-    } else if (info.file.status === 'removed') {\r\n-      setImageFile(null);\r\n-    }\r\n-  };\r\n-\r\n-  const uploadImageToSupabase = async (file) => {\r\n-    if (!file) return null;\r\n-    \r\n-    const fileExt = file.name.split('.').pop();\r\n-    const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 9)}.${fileExt}`;\r\n-    const filePath = `${user.id}/${fileName}`;\r\n-\r\n-    try {\r\n-      const { data, error } = await supabase\r\n-        .storage\r\n-        .from('event-images')\r\n-        .upload(filePath, file, {\r\n-          cacheControl: '3600',\r\n-          upsert: false\r\n-        });\r\n-\r\n-      if (error) throw error;\r\n-\r\n-      // Get public URL\r\n-      const { data: { publicUrl } } = supabase\r\n-        .storage\r\n-        .from('event-images')\r\n-        .getPublicUrl(filePath);\r\n-\r\n-      return publicUrl;\r\n-    } catch (error) {\r\n-      console.error('Upload error:', error);\r\n-      message.error('Failed to upload image. Please try again.');\r\n-      throw error;\r\n-    }\r\n-  };\r\n-\r\n-  const handleSubmit = async () => {\r\n-    try {\r\n-      if (loading) return;\r\n-      setLoading(true);\r\n-      \r\n-      const values = await form.validateFields();\r\n-      \r\n-      // Combine date and time\r\n-      const eventDateTime = dayjs(values.date)\r\n-        .hour(values.time.hour())\r\n-        .minute(values.time.minute())\r\n-        .toISOString();\r\n-\r\n-      // Upload image if exists\r\n-      let imageUrl = null;\r\n-      if (imageFile) {\r\n-        imageUrl = await uploadImageToSupabase(imageFile);\r\n-        console.log('Image URL:', imageUrl);\r\n-      }\r\n-\r\n-      const submissionData = {\r\n-        title: values.title,\r\n-        description: values.description,\r\n-        date_time: eventDateTime,\r\n-        location: values.location,\r\n-        category: values.category,\r\n-        image_url: imageUrl,\r\n-        user_id: user.id, // Changed from 'id' to 'user_id' for better clarity\r\n-      };\r\n-\r\n-      console.log('Submitting data:', submissionData);\r\n-\r\n-      // Submit form data\r\n-      const { error } = await supabase\r\n-        .from('events') // Changed from 'event-form-request' to 'events'\r\n-        .insert([submissionData]);\r\n-\r\n-      if (error) throw error;\r\n-\r\n-      message.success('Event created successfully!');\r\n-      form.resetFields();\r\n-      setImageFile(null);\r\n-      setFormKey(prev => prev + 1);\r\n-\r\n-    } catch (error) {\r\n-      console.error('Submission error:', error);\r\n-      message.error(error.message || 'Failed to create event. Please try again.');\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"event-form-container\">\r\n-      <h2 style={{ marginBottom: 24 }}>Create New Event</h2>\r\n-\r\n-      <Form \r\n-        key={formKey}\r\n-        form={form} \r\n-        layout=\"vertical\"\r\n-      >\r\n-        <Row gutter={16}>\r\n-          <Col span={12}>\r\n-            <FormInput \r\n-              label=\"Title\" \r\n-              name=\"title\" \r\n-              rules={[{ required: true, message: 'Please enter event title' }]} \r\n-              type=\"text\" \r\n-            />\r\n-            \r\n-            <FormInput \r\n-              label=\"Description\" \r\n-              name=\"description\" \r\n-              rules={[{ required: true, message: 'Please enter event description' }]} \r\n-              type=\"textarea\" \r\n-              rows={4}\r\n-            />\r\n-\r\n-            <Form.Item\r\n-              label=\"Event Image\"\r\n-              name=\"image\"\r\n-              rules={[{ required: false }]}\r\n-            >\r\n-              <Upload\r\n-                name=\"image\"\r\n-                listType=\"picture\"\r\n-                beforeUpload={beforeUpload}\r\n-                onChange={handleImageChange}\r\n-                maxCount={1}\r\n-                accept=\"image/*\"\r\n-                fileList={imageFile ? [{\r\n-                  uid: '1',\r\n-                  name: imageFile.name,\r\n-                  status: 'done',\r\n-                  originFileObj: imageFile\r\n-                }] : []}\r\n-              >\r\n-                <Button icon={<UploadOutlined />}>` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` ` `` to upload</Button>\r\n-              </Upload>\r\n-            </Form.Item>\r\n-          </Col>\r\n-          \r\n-          <Col span={12}>\r\n-            <Form.Item\r\n-              label=\"Date\"\r\n-              name=\"date\"\r\n-              rules={[{ required: true, message: 'Please select event date' }]}\r\n-            >\r\n-              <DatePicker style={{ width: '100%' }} />\r\n-            </Form.Item>\r\n-            \r\n-            <Form.Item\r\n-              label=\"Time\"\r\n-              name=\"time\"\r\n-              rules={[{ required: true, message: 'Please select event time' }]}\r\n-            >\r\n-              <TimePicker style={{ width: '100%' }} format=\"HH:mm\" />\r\n-            </Form.Item>\r\n-            \r\n-            <FormInput \r\n-              label=\"Location\" \r\n-              name=\"location\" \r\n-              rules={[{ required: true, message: 'Please enter event location' }]} \r\n-              type=\"text\" \r\n-            />\r\n-            \r\n-            <FormInput \r\n-              label=\"Category\" \r\n-              name=\"category\" \r\n-              rules={[{ required: true, message: 'Please select event category' }]} \r\n-              type=\"select\" \r\n-              options={categories}\r\n-            />\r\n-          </Col>\r\n-        </Row>\r\n-\r\n-        <Form.Item style={{ marginTop: 24 }}>\r\n-          <FormButton \r\n-            type=\"primary\" \r\n-            style={{ background: 'black' }}\r\n-            onClick={handleSubmit}\r\n-            loading={loading}\r\n-          >\r\n-            Create Event\r\n-          </FormButton>\r\n-        </Form.Item>\r\n-      </Form>\r\n-\r\n-      <style jsx>{`\r\n-        .event-form-container {\r\n-          max-width: 800px;\r\n-          margin: 0 auto;\r\n-          padding: 24px;\r\n-          background: #fff;\r\n-          border-radius: 8px;\r\n-          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n-        }\r\n-        .ant-upload.ant-upload-select-picture-card {\r\n-          width: 100%;\r\n-          margin-right: 0;\r\n-        }\r\n-      `}</style>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n export default EventForm;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748258815130,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,30 +155,26 @@\n               type=\"textarea\" \r\n               rows={4}\r\n             />\r\n \r\n-            <Form.Item\r\n-              label=\"Event Image\"\r\n-              name=\"image\"\r\n-              rules={[{ required: false }]}\r\n-            >\r\n-              <Upload\r\n-                name=\"image\"\r\n-                listType=\"picture\"\r\n-                beforeUpload={beforeUpload}\r\n-                onChange={handleImageChange}\r\n-                maxCount={1}\r\n-                accept=\"image/*\"\r\n-                fileList={imageFile ? [{\r\n-                  uid: '1',\r\n-                  name: imageFile.name,\r\n-                  status: 'done',\r\n-                  originFileObj: imageFile\r\n-                }] : []}\r\n-              >\r\n-                <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n-              </Upload>\r\n-            </Form.Item>\r\n+           <Form.Item\r\n+  label=\"Event Image\"\r\n+  name=\"image\"\r\n+  rules={[{ required: false }]}\r\n+>\r\n+  <Upload\r\n+    name=\"image\"\r\n+    listType=\"picture\"\r\n+    beforeUpload={beforeUpload}\r\n+    onChange={handleImageChange}\r\n+    maxCount={1}\r\n+    accept=\"image/*\"\r\n+    showUploadList={{ showRemoveIcon: true }}\r\n+  >\r\n+    <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n+  </Upload>\r\n+</Form.Item>\r\n+\r\n           </Col>\r\n           \r\n           <Col span={12}>\r\n             <Form.Item\r\n"
                },
                {
                    "date": 1748258994340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,246 @@\n+import React, { useState, useContext } from 'react';\r\n+import { Form, message, Row, Col, DatePicker, TimePicker, Upload, Button } from 'antd';\r\n+import { UploadOutlined } from '@ant-design/icons';\r\n+import FormInput from './FormInput';\r\n+import FormButton from './FormButton';\r\n+import supabase from '../services/supabaseClient';\r\n+import { AuthContext } from '../context/AuthContext';\r\n+import dayjs from 'dayjs';\r\n+\r\n+const EventForm = () => {\r\n+  const [form] = Form.useForm();\r\n+  const { loading, setLoading, user } = useContext(AuthContext);\r\n+  const [formKey, setFormKey] = useState(0);\r\n+  const [imageFile, setImageFile] = useState(null);\r\n+\r\n+  const categories = [\r\n+    { value: 'tech', label: 'Technology' },\r\n+    { value: 'education', label: 'Education' },\r\n+    { value: 'entertainment', label: 'Entertainment' },\r\n+    { value: 'business', label: 'Business' },\r\n+    { value: 'health', label: 'Health & Wellness' },\r\n+    { value: 'sports', label: 'Sports' },\r\n+    { value: 'other', label: 'Other' },\r\n+  ];\r\n+\r\n+  const beforeUpload = (file) => {\r\n+    const isImage = file.type.startsWith('image/');\r\n+    if (!isImage) {\r\n+      message.error('You can only upload image files!');\r\n+      return Upload.LIST_IGNORE;\r\n+    }\r\n+    const isLt5MB = file.size / 1024 / 1024 < 5;\r\n+    if (!isLt5MB) {\r\n+      message.error('Image must be smaller than 5MB!');\r\n+      return Upload.LIST_IGNORE;\r\n+    }\r\n+    return false; // Prevent automatic upload\r\n+  };\r\n+const handleImageChange = (info) => {\r\n+  // `fileList` se latest file get karo\r\n+  const file = info.fileList[0]?.originFileObj;\r\n+  \r\n+  if (file) {\r\n+    setImageFile(file);\r\n+  } else {\r\n+    setImageFile(null);\r\n+  }\r\n+};\r\n+\r\n+\r\n+  const uploadImageToSupabase = async (file) => {\r\n+    if (!file) return null;\r\n+    \r\n+    const fileExt = file.name.split('.').pop();\r\n+    const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 9)}.${fileExt}`;\r\n+    const filePath = `${user.id}/${fileName}`;\r\n+    console.log('Uploading file to:', filePath);\r\n+\r\n+    try {\r\n+      const { data, error } = await supabase\r\n+        .storage\r\n+        .from('event-images')\r\n+        .upload(filePath, file, {\r\n+          cacheControl: '3600',\r\n+          upsert: false\r\n+        });\r\n+\r\n+      if (error) throw error;\r\n+\r\n+      // Get public URL\r\n+      const { data: { publicUrl } } = supabase\r\n+        .storage\r\n+        .from('event-images')\r\n+        .getPublicUrl(filePath);\r\n+\r\n+      return publicUrl;\r\n+    } catch (error) {\r\n+      console.error('Upload error:', error);\r\n+      message.error('Failed to upload image. Please try again.');\r\n+      throw error;\r\n+    }\r\n+  };\r\n+\r\n+  const handleSubmit = async () => {\r\n+    try {\r\n+      if (loading) return;\r\n+      setLoading(true);\r\n+      \r\n+      const values = await form.validateFields();\r\n+      \r\n+      // Combine date and time\r\n+      const eventDateTime = dayjs(values.date)\r\n+        .hour(values.time.hour())\r\n+        .minute(values.time.minute())\r\n+        .toISOString();\r\n+\r\n+      // Upload image if exists\r\n+      let imageUrl = null;\r\n+      if (imageFile) {\r\n+        imageUrl = await uploadImageToSupabase(imageFile);\r\n+        console.log('Image URL:', imageUrl);\r\n+      }\r\n+\r\n+      const submissionData = {\r\n+        title: values.title,\r\n+        description: values.description,\r\n+        date_time: eventDateTime,\r\n+        location: values.location,\r\n+        category: values.category,\r\n+        image_url: imageUrl,\r\n+        user_id: user.id, // Changed from 'id' to 'user_id' for better clarity\r\n+      };\r\n+\r\n+      console.log('Submitting data:', submissionData);\r\n+\r\n+      // Submit form data\r\n+      const { error } = await supabase\r\n+        .from('events') // Changed from 'event-form-request' to 'events'\r\n+        .insert([submissionData]);\r\n+\r\n+      if (error) throw error;\r\n+\r\n+      message.success('Event created successfully!');\r\n+      form.resetFields();\r\n+      setImageFile(null);\r\n+      setFormKey(prev => prev + 1);\r\n+\r\n+    } catch (error) {\r\n+      console.error('Submission error:', error);\r\n+      message.error(error.message || 'Failed to create event. Please try again.');\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  return (\r\n+    <div className=\"event-form-container\">\r\n+      <h2 style={{ marginBottom: 24 }}>Create New Event</h2>\r\n+\r\n+      <Form \r\n+        key={formKey}\r\n+        form={form} \r\n+        layout=\"vertical\"\r\n+      >\r\n+        <Row gutter={16}>\r\n+          <Col span={12}>\r\n+            <FormInput \r\n+              label=\"Title\" \r\n+              name=\"title\" \r\n+              rules={[{ required: true, message: 'Please enter event title' }]} \r\n+              type=\"text\" \r\n+            />\r\n+            \r\n+            <FormInput \r\n+              label=\"Description\" \r\n+              name=\"description\" \r\n+              rules={[{ required: true, message: 'Please enter event description' }]} \r\n+              type=\"textarea\" \r\n+              rows={4}\r\n+            />\r\n+\r\n+           <Form.Item\r\n+  label=\"Event Image\"\r\n+  name=\"image\"\r\n+  rules={[{ required: false }]}\r\n+>\r\n+  <Upload\r\n+    name=\"image\"\r\n+    listType=\"picture\"\r\n+    beforeUpload={beforeUpload}\r\n+    onChange={handleImageChange}\r\n+    maxCount={1}\r\n+    accept=\"image/*\"\r\n+    showUploadList={{ showRemoveIcon: true }}\r\n+  >\r\n+    <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n+  </Upload>\r\n+</Form.Item>\r\n+\r\n+          </Col>\r\n+          \r\n+          <Col span={12}>\r\n+            <Form.Item\r\n+              label=\"Date\"\r\n+              name=\"date\"\r\n+              rules={[{ required: true, message: 'Please select event date' }]}\r\n+            >\r\n+              <DatePicker style={{ width: '100%' }} />\r\n+            </Form.Item>\r\n+            \r\n+            <Form.Item\r\n+              label=\"Time\"\r\n+              name=\"time\"\r\n+              rules={[{ required: true, message: 'Please select event time' }]}\r\n+            >\r\n+              <TimePicker style={{ width: '100%' }} format=\"HH:mm\" />\r\n+            </Form.Item>\r\n+            \r\n+            <FormInput \r\n+              label=\"Location\" \r\n+              name=\"location\" \r\n+              rules={[{ required: true, message: 'Please enter event location' }]} \r\n+              type=\"text\" \r\n+            />\r\n+            \r\n+            <FormInput \r\n+              label=\"Category\" \r\n+              name=\"category\" \r\n+              rules={[{ required: true, message: 'Please select event category' }]} \r\n+              type=\"select\" \r\n+              options={categories}\r\n+            />\r\n+          </Col>\r\n+        </Row>\r\n+\r\n+        <Form.Item style={{ marginTop: 24 }}>\r\n+          <FormButton \r\n+            type=\"primary\" \r\n+            style={{ background: 'black' }}\r\n+            onClick={handleSubmit}\r\n+            loading={loading}\r\n+          >\r\n+            Create Event\r\n+          </FormButton>\r\n+        </Form.Item>\r\n+      </Form>\r\n+\r\n+      <style jsx>{`\r\n+        .event-form-container {\r\n+          max-width: 800px;\r\n+          margin: 0 auto;\r\n+          padding: 24px;\r\n+          background: #fff;\r\n+          border-radius: 8px;\r\n+          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n+        }\r\n+        .ant-upload.ant-upload-select-picture-card {\r\n+          width: 100%;\r\n+          margin-right: 0;\r\n+        }\r\n+      `}</style>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default EventForm;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748259037916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n       console.log('Submitting data:', submissionData);\r\n \r\n       // Submit form data\r\n       const { error } = await supabase\r\n-        .from('events') // Changed from 'event-form-request' to 'events'\r\n+        .from('event') // Changed from 'event-form-request' to 'events'\r\n         .insert([submissionData]);\r\n \r\n       if (error) throw error;\r\n \r\n@@ -242,248 +242,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default EventForm;\n-import React, { useState, useContext } from 'react';\r\n-import { Form, message, Row, Col, DatePicker, TimePicker, Upload, Button } from 'antd';\r\n-import { UploadOutlined } from '@ant-design/icons';\r\n-import FormInput from './FormInput';\r\n-import FormButton from './FormButton';\r\n-import supabase from '../services/supabaseClient';\r\n-import { AuthContext } from '../context/AuthContext';\r\n-import dayjs from 'dayjs';\r\n-\r\n-const EventForm = () => {\r\n-  const [form] = Form.useForm();\r\n-  const { loading, setLoading, user } = useContext(AuthContext);\r\n-  const [formKey, setFormKey] = useState(0);\r\n-  const [imageFile, setImageFile] = useState(null);\r\n-\r\n-  const categories = [\r\n-    { value: 'tech', label: 'Technology' },\r\n-    { value: 'education', label: 'Education' },\r\n-    { value: 'entertainment', label: 'Entertainment' },\r\n-    { value: 'business', label: 'Business' },\r\n-    { value: 'health', label: 'Health & Wellness' },\r\n-    { value: 'sports', label: 'Sports' },\r\n-    { value: 'other', label: 'Other' },\r\n-  ];\r\n-\r\n-  const beforeUpload = (file) => {\r\n-    const isImage = file.type.startsWith('image/');\r\n-    if (!isImage) {\r\n-      message.error('You can only upload image files!');\r\n-      return Upload.LIST_IGNORE;\r\n-    }\r\n-    const isLt5MB = file.size / 1024 / 1024 < 5;\r\n-    if (!isLt5MB) {\r\n-      message.error('Image must be smaller than 5MB!');\r\n-      return Upload.LIST_IGNORE;\r\n-    }\r\n-    return false; // Prevent automatic upload\r\n-  };\r\n-\r\n-  const handleImageChange = (info) => {\r\n-    if (info.file.status === 'done') {\r\n-      setImageFile(info.file.originFileObj);\r\n-    } else if (info.file.status === 'removed') {\r\n-      setImageFile(null);\r\n-    }\r\n-  };\r\n-\r\n-  const uploadImageToSupabase = async (file) => {\r\n-    if (!file) return null;\r\n-    \r\n-    const fileExt = file.name.split('.').pop();\r\n-    const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 9)}.${fileExt}`;\r\n-    const filePath = `${user.id}/${fileName}`;\r\n-    console.log('Uploading file to:', filePath);\r\n-\r\n-    try {\r\n-      const { data, error } = await supabase\r\n-        .storage\r\n-        .from('event-images')\r\n-        .upload(filePath, file, {\r\n-          cacheControl: '3600',\r\n-          upsert: false\r\n-        });\r\n-\r\n-      if (error) throw error;\r\n-\r\n-      // Get public URL\r\n-      const { data: { publicUrl } } = supabase\r\n-        .storage\r\n-        .from('event-images')\r\n-        .getPublicUrl(filePath);\r\n-\r\n-      return publicUrl;\r\n-    } catch (error) {\r\n-      console.error('Upload error:', error);\r\n-      message.error('Failed to upload image. Please try again.');\r\n-      throw error;\r\n-    }\r\n-  };\r\n-\r\n-  const handleSubmit = async () => {\r\n-    try {\r\n-      if (loading) return;\r\n-      setLoading(true);\r\n-      \r\n-      const values = await form.validateFields();\r\n-      \r\n-      // Combine date and time\r\n-      const eventDateTime = dayjs(values.date)\r\n-        .hour(values.time.hour())\r\n-        .minute(values.time.minute())\r\n-        .toISOString();\r\n-\r\n-      // Upload image if exists\r\n-      let imageUrl = null;\r\n-      if (imageFile) {\r\n-        imageUrl = await uploadImageToSupabase(imageFile);\r\n-        console.log('Image URL:', imageUrl);\r\n-      }\r\n-\r\n-      const submissionData = {\r\n-        title: values.title,\r\n-        description: values.description,\r\n-        date_time: eventDateTime,\r\n-        location: values.location,\r\n-        category: values.category,\r\n-        image_url: imageUrl,\r\n-        user_id: user.id, // Changed from 'id' to 'user_id' for better clarity\r\n-      };\r\n-\r\n-      console.log('Submitting data:', submissionData);\r\n-\r\n-      // Submit form data\r\n-      const { error } = await supabase\r\n-        .from('events') // Changed from 'event-form-request' to 'events'\r\n-        .insert([submissionData]);\r\n-\r\n-      if (error) throw error;\r\n-\r\n-      message.success('Event created successfully!');\r\n-      form.resetFields();\r\n-      setImageFile(null);\r\n-      setFormKey(prev => prev + 1);\r\n-\r\n-    } catch (error) {\r\n-      console.error('Submission error:', error);\r\n-      message.error(error.message || 'Failed to create event. Please try again.');\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  return (\r\n-    <div className=\"event-form-container\">\r\n-      <h2 style={{ marginBottom: 24 }}>Create New Event</h2>\r\n-\r\n-      <Form \r\n-        key={formKey}\r\n-        form={form} \r\n-        layout=\"vertical\"\r\n-      >\r\n-        <Row gutter={16}>\r\n-          <Col span={12}>\r\n-            <FormInput \r\n-              label=\"Title\" \r\n-              name=\"title\" \r\n-              rules={[{ required: true, message: 'Please enter event title' }]} \r\n-              type=\"text\" \r\n-            />\r\n-            \r\n-            <FormInput \r\n-              label=\"Description\" \r\n-              name=\"description\" \r\n-              rules={[{ required: true, message: 'Please enter event description' }]} \r\n-              type=\"textarea\" \r\n-              rows={4}\r\n-            />\r\n-\r\n-           <Form.Item\r\n-  label=\"Event Image\"\r\n-  name=\"image\"\r\n-  rules={[{ required: false }]}\r\n->\r\n-  <Upload\r\n-    name=\"image\"\r\n-    listType=\"picture\"\r\n-    beforeUpload={beforeUpload}\r\n-    onChange={handleImageChange}\r\n-    maxCount={1}\r\n-    accept=\"image/*\"\r\n-    showUploadList={{ showRemoveIcon: true }}\r\n-  >\r\n-    <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n-  </Upload>\r\n-</Form.Item>\r\n-\r\n-          </Col>\r\n-          \r\n-          <Col span={12}>\r\n-            <Form.Item\r\n-              label=\"Date\"\r\n-              name=\"date\"\r\n-              rules={[{ required: true, message: 'Please select event date' }]}\r\n-            >\r\n-              <DatePicker style={{ width: '100%' }} />\r\n-            </Form.Item>\r\n-            \r\n-            <Form.Item\r\n-              label=\"Time\"\r\n-              name=\"time\"\r\n-              rules={[{ required: true, message: 'Please select event time' }]}\r\n-            >\r\n-              <TimePicker style={{ width: '100%' }} format=\"HH:mm\" />\r\n-            </Form.Item>\r\n-            \r\n-            <FormInput \r\n-              label=\"Location\" \r\n-              name=\"location\" \r\n-              rules={[{ required: true, message: 'Please enter event location' }]} \r\n-              type=\"text\" \r\n-            />\r\n-            \r\n-            <FormInput \r\n-              label=\"Category\" \r\n-              name=\"category\" \r\n-              rules={[{ required: true, message: 'Please select event category' }]} \r\n-              type=\"select\" \r\n-              options={categories}\r\n-            />\r\n-          </Col>\r\n-        </Row>\r\n-\r\n-        <Form.Item style={{ marginTop: 24 }}>\r\n-          <FormButton \r\n-            type=\"primary\" \r\n-            style={{ background: 'black' }}\r\n-            onClick={handleSubmit}\r\n-            loading={loading}\r\n-          >\r\n-            Create Event\r\n-          </FormButton>\r\n-        </Form.Item>\r\n-      </Form>\r\n-\r\n-      <style jsx>{`\r\n-        .event-form-container {\r\n-          max-width: 800px;\r\n-          margin: 0 auto;\r\n-          padding: 24px;\r\n-          background: #fff;\r\n-          border-radius: 8px;\r\n-          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n-        }\r\n-        .ant-upload.ant-upload-select-picture-card {\r\n-          width: 100%;\r\n-          margin-right: 0;\r\n-        }\r\n-      `}</style>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n export default EventForm;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748259048242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,9 +114,9 @@\n       console.log('Submitting data:', submissionData);\r\n \r\n       // Submit form data\r\n       const { error } = await supabase\r\n-        .from('event') // Changed from 'event-form-request' to 'events'\r\n+        .from('event-form-request') // Changed from 'event-form-request' to 'events'\r\n         .insert([submissionData]);\r\n \r\n       if (error) throw error;\r\n \r\n"
                },
                {
                    "date": 1748259131040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,19 +35,16 @@\n       return Upload.LIST_IGNORE;\r\n     }\r\n     return false; // Prevent automatic upload\r\n   };\r\n-const handleImageChange = (info) => {\r\n-  // `fileList` se latest file get karo\r\n-  const file = info.fileList[0]?.originFileObj;\r\n-  \r\n-  if (file) {\r\n-    setImageFile(file);\r\n-  } else {\r\n-    setImageFile(null);\r\n-  }\r\n-};\r\n \r\n+  const handleImageChange = (info) => {\r\n+    if (info.file.status === 'done') {\r\n+      setImageFile(info.file.originFileObj);\r\n+    } else if (info.file.status === 'removed') {\r\n+      setImageFile(null);\r\n+    }\r\n+  };\r\n \r\n   const uploadImageToSupabase = async (file) => {\r\n     if (!file) return null;\r\n     \r\n@@ -114,9 +111,9 @@\n       console.log('Submitting data:', submissionData);\r\n \r\n       // Submit form data\r\n       const { error } = await supabase\r\n-        .from('event-form-request') // Changed from 'event-form-request' to 'events'\r\n+        .from('events') // Changed from 'event-form-request' to 'events'\r\n         .insert([submissionData]);\r\n \r\n       if (error) throw error;\r\n \r\n"
                },
                {
                    "date": 1748259142001,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n       console.log('Submitting data:', submissionData);\r\n \r\n       // Submit form data\r\n       const { error } = await supabase\r\n-        .from('events') // Changed from 'event-form-request' to 'events'\r\n+        .from('event') // Changed from 'event-form-request' to 'events'\r\n         .insert([submissionData]);\r\n \r\n       if (error) throw error;\r\n \r\n"
                },
                {
                    "date": 1748259148591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n       console.log('Submitting data:', submissionData);\r\n \r\n       // Submit form data\r\n       const { error } = await supabase\r\n-        .from('event') // Changed from 'event-form-request' to 'events'\r\n+        .from('event-form-request') // Changed from 'event-form-request' to 'events'\r\n         .insert([submissionData]);\r\n \r\n       if (error) throw error;\r\n \r\n"
                },
                {
                    "date": 1748259560336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,16 +36,14 @@\n     }\r\n     return false; // Prevent automatic upload\r\n   };\r\n \r\n-  const handleImageChange = (info) => {\r\n-    if (info.file.status === 'done') {\r\n-      setImageFile(info.file.originFileObj);\r\n-    } else if (info.file.status === 'removed') {\r\n-      setImageFile(null);\r\n-    }\r\n-  };\r\n+const handleImageChange = (info) => {\r\n+  const file = info.file.originFileObj || info.file;\r\n+  setImageFile(file);\r\n+};\r\n \r\n+\r\n   const uploadImageToSupabase = async (file) => {\r\n     if (!file) return null;\r\n     \r\n     const fileExt = file.name.split('.').pop();\r\n"
                },
                {
                    "date": 1748259933526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     if (!isLt5MB) {\r\n       message.error('Image must be smaller than 5MB!');\r\n       return Upload.LIST_IGNORE;\r\n     }\r\n-    return false; // Prevent automatic upload\r\n+    return false;\r\n   };\r\n \r\n const handleImageChange = (info) => {\r\n   const file = info.file.originFileObj || info.file;\r\n"
                },
                {
                    "date": 1748259942683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n         date_time: eventDateTime,\r\n         location: values.location,\r\n         category: values.category,\r\n         image_url: imageUrl,\r\n-        user_id: user.id, // Changed from 'id' to 'user_id' for better clarity\r\n+        user_id: user.id, \r\n       };\r\n \r\n       console.log('Submitting data:', submissionData);\r\n \r\n"
                },
                {
                    "date": 1748259952313,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,8 @@\n         });\r\n \r\n       if (error) throw error;\r\n \r\n-      // Get public URL\r\n       const { data: { publicUrl } } = supabase\r\n         .storage\r\n         .from('event-images')\r\n         .getPublicUrl(filePath);\r\n@@ -109,9 +108,9 @@\n       console.log('Submitting data:', submissionData);\r\n \r\n       // Submit form data\r\n       const { error } = await supabase\r\n-        .from('event-form-request') // Changed from 'event-form-request' to 'events'\r\n+        .from('event-form-request')\r\n         .insert([submissionData]);\r\n \r\n       if (error) throw error;\r\n \r\n"
                },
                {
                    "date": 1748259959877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,10 +80,9 @@\n       if (loading) return;\r\n       setLoading(true);\r\n       \r\n       const values = await form.validateFields();\r\n-      \r\n-      // Combine date and time\r\n+\r\n       const eventDateTime = dayjs(values.date)\r\n         .hour(values.time.hour())\r\n         .minute(values.time.minute())\r\n         .toISOString();\r\n"
                },
                {
                    "date": 1748259965862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,15 +80,12 @@\n       if (loading) return;\r\n       setLoading(true);\r\n       \r\n       const values = await form.validateFields();\r\n-\r\n       const eventDateTime = dayjs(values.date)\r\n         .hour(values.time.hour())\r\n         .minute(values.time.minute())\r\n         .toISOString();\r\n-\r\n-      // Upload image if exists\r\n       let imageUrl = null;\r\n       if (imageFile) {\r\n         imageUrl = await uploadImageToSupabase(imageFile);\r\n         console.log('Image URL:', imageUrl);\r\n"
                },
                {
                    "date": 1748259975727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,9 @@\n       const eventDateTime = dayjs(values.date)\r\n         .hour(values.time.hour())\r\n         .minute(values.time.minute())\r\n         .toISOString();\r\n+\r\n       let imageUrl = null;\r\n       if (imageFile) {\r\n         imageUrl = await uploadImageToSupabase(imageFile);\r\n         console.log('Image URL:', imageUrl);\r\n@@ -100,11 +101,9 @@\n         image_url: imageUrl,\r\n         user_id: user.id, \r\n       };\r\n \r\n-      console.log('Submitting data:', submissionData);\r\n-\r\n-      // Submit form data\r\n+      // console.log('Submitting data:', submissionData);\r\n       const { error } = await supabase\r\n         .from('event-form-request')\r\n         .insert([submissionData]);\r\n \r\n"
                },
                {
                    "date": 1748259985723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n     \r\n     const fileExt = file.name.split('.').pop();\r\n     const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 9)}.${fileExt}`;\r\n     const filePath = `${user.id}/${fileName}`;\r\n-    console.log('Uploading file to:', filePath);\r\n+    // console.log('Uploading file to:', filePath);\r\n \r\n     try {\r\n       const { data, error } = await supabase\r\n         .storage\r\n"
                },
                {
                    "date": 1748260010250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,17 +36,17 @@\n     }\r\n     return false;\r\n   };\r\n \r\n-const handleImageChange = (info) => {\r\n-  const file = info.file.originFileObj || info.file;\r\n-  setImageFile(file);\r\n-};\r\n+  const handleImageChange = (info) => {\r\n+    const file = info.file.originFileObj || info.file;\r\n+    setImageFile(file);\r\n+  };\r\n \r\n \r\n   const uploadImageToSupabase = async (file) => {\r\n     if (!file) return null;\r\n-    \r\n+\r\n     const fileExt = file.name.split('.').pop();\r\n     const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 9)}.${fileExt}`;\r\n     const filePath = `${user.id}/${fileName}`;\r\n     // console.log('Uploading file to:', filePath);\r\n@@ -78,9 +78,9 @@\n   const handleSubmit = async () => {\r\n     try {\r\n       if (loading) return;\r\n       setLoading(true);\r\n-      \r\n+\r\n       const values = await form.validateFields();\r\n       const eventDateTime = dayjs(values.date)\r\n         .hour(values.time.hour())\r\n         .minute(values.time.minute())\r\n@@ -98,9 +98,9 @@\n         date_time: eventDateTime,\r\n         location: values.location,\r\n         category: values.category,\r\n         image_url: imageUrl,\r\n-        user_id: user.id, \r\n+        user_id: user.id,\r\n       };\r\n \r\n       // console.log('Submitting data:', submissionData);\r\n       const { error } = await supabase\r\n@@ -125,87 +125,87 @@\n   return (\r\n     <div className=\"event-form-container\">\r\n       <h2 style={{ marginBottom: 24 }}>Create New Event</h2>\r\n \r\n-      <Form \r\n+      <Form\r\n         key={formKey}\r\n-        form={form} \r\n+        form={form}\r\n         layout=\"vertical\"\r\n       >\r\n         <Row gutter={16}>\r\n           <Col span={12}>\r\n-            <FormInput \r\n-              label=\"Title\" \r\n-              name=\"title\" \r\n-              rules={[{ required: true, message: 'Please enter event title' }]} \r\n-              type=\"text\" \r\n+            <FormInput\r\n+              label=\"Title\"\r\n+              name=\"title\"\r\n+              rules={[{ required: true, message: 'Please enter event title' }]}\r\n+              type=\"text\"\r\n             />\r\n-            \r\n-            <FormInput \r\n-              label=\"Description\" \r\n-              name=\"description\" \r\n-              rules={[{ required: true, message: 'Please enter event description' }]} \r\n-              type=\"textarea\" \r\n+\r\n+            <FormInput\r\n+              label=\"Description\"\r\n+              name=\"description\"\r\n+              rules={[{ required: true, message: 'Please enter event description' }]}\r\n+              type=\"textarea\"\r\n               rows={4}\r\n             />\r\n \r\n-           <Form.Item\r\n-  label=\"Event Image\"\r\n-  name=\"image\"\r\n-  rules={[{ required: false }]}\r\n->\r\n-  <Upload\r\n-    name=\"image\"\r\n-    listType=\"picture\"\r\n-    beforeUpload={beforeUpload}\r\n-    onChange={handleImageChange}\r\n-    maxCount={1}\r\n-    accept=\"image/*\"\r\n-    showUploadList={{ showRemoveIcon: true }}\r\n-  >\r\n-    <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n-  </Upload>\r\n-</Form.Item>\r\n+            <Form.Item\r\n+              label=\"Event Image\"\r\n+              name=\"image\"\r\n+              rules={[{ required: false }]}\r\n+            >\r\n+              <Upload\r\n+                name=\"image\"\r\n+                listType=\"picture\"\r\n+                beforeUpload={beforeUpload}\r\n+                onChange={handleImageChange}\r\n+                maxCount={1}\r\n+                accept=\"image/*\"\r\n+                showUploadList={{ showRemoveIcon: true }}\r\n+              >\r\n+                <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n+              </Upload>\r\n+            </Form.Item>\r\n \r\n           </Col>\r\n-          \r\n+\r\n           <Col span={12}>\r\n             <Form.Item\r\n               label=\"Date\"\r\n               name=\"date\"\r\n               rules={[{ required: true, message: 'Please select event date' }]}\r\n             >\r\n               <DatePicker style={{ width: '100%' }} />\r\n             </Form.Item>\r\n-            \r\n+\r\n             <Form.Item\r\n               label=\"Time\"\r\n               name=\"time\"\r\n               rules={[{ required: true, message: 'Please select event time' }]}\r\n             >\r\n               <TimePicker style={{ width: '100%' }} format=\"HH:mm\" />\r\n             </Form.Item>\r\n-            \r\n-            <FormInput \r\n-              label=\"Location\" \r\n-              name=\"location\" \r\n-              rules={[{ required: true, message: 'Please enter event location' }]} \r\n-              type=\"text\" \r\n+\r\n+            <FormInput\r\n+              label=\"Location\"\r\n+              name=\"location\"\r\n+              rules={[{ required: true, message: 'Please enter event location' }]}\r\n+              type=\"text\"\r\n             />\r\n-            \r\n-            <FormInput \r\n-              label=\"Category\" \r\n-              name=\"category\" \r\n-              rules={[{ required: true, message: 'Please select event category' }]} \r\n-              type=\"select\" \r\n+\r\n+            <FormInput\r\n+              label=\"Category\"\r\n+              name=\"category\"\r\n+              rules={[{ required: true, message: 'Please select event category' }]}\r\n+              type=\"select\"\r\n               options={categories}\r\n             />\r\n           </Col>\r\n         </Row>\r\n \r\n         <Form.Item style={{ marginTop: 24 }}>\r\n-          <FormButton \r\n-            type=\"primary\" \r\n+          <FormButton\r\n+            type=\"primary\"\r\n             style={{ background: 'black' }}\r\n             onClick={handleSubmit}\r\n             loading={loading}\r\n           >\r\n"
                }
            ],
            "date": 1748256871445,
            "name": "Commit-0",
            "content": "import React, { useState, useContext } from 'react';\r\nimport { Form, message, Row, Col, DatePicker, TimePicker, Upload, Button } from 'antd';\r\nimport { UploadOutlined } from '@ant-design/icons';\r\nimport FormInput from './FormInput';\r\nimport FormButton from './FormButton';\r\nimport supabase from '../services/supabaseClient';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport dayjs from 'dayjs';\r\n\r\nconst EventForm = () => {\r\n  const [form] = Form.useForm();\r\n  const { loading, setLoading, user } = useContext(AuthContext);\r\n  const [formKey, setFormKey] = useState(0);\r\n  const [imageFile, setImageFile] = useState(null);\r\n\r\n  const categories = [\r\n    { value: 'tech', label: 'Technology' },\r\n    { value: 'education', label: 'Education' },\r\n    { value: 'entertainment', label: 'Entertainment' },\r\n    { value: 'business', label: 'Business' },\r\n    { value: 'health', label: 'Health & Wellness' },\r\n    { value: 'sports', label: 'Sports' },\r\n    { value: 'other', label: 'Other' },\r\n  ];\r\n\r\n  const beforeUpload = (file) => {\r\n    const isImage = file.type.startsWith('image/');\r\n    if (!isImage) {\r\n      message.error('You can only upload image files!');\r\n      return Upload.LIST_IGNORE;\r\n    }\r\n    const isLt5MB = file.size / 1024 / 1024 < 5;\r\n    if (!isLt5MB) {\r\n      message.error('Image must be smaller than 5MB!');\r\n      return Upload.LIST_IGNORE;\r\n    }\r\n    return false; // Prevent automatic upload\r\n  };\r\n\r\n  const handleImageChange = (info) => {\r\n    if (info.file.status === 'done') {\r\n      setImageFile(info.file.originFileObj);\r\n    } else if (info.file.status === 'removed') {\r\n      setImageFile(null);\r\n    }\r\n  };\r\n\r\n  const uploadImageToSupabase = async (file) => {\r\n    if (!file) return null;\r\n    \r\n    const fileExt = file.name.split('.').pop();\r\n    const fileName = `${Date.now()}-${Math.random().toString(36).substring(2, 9)}.${fileExt}`;\r\n    const filePath = `${user.id}/${fileName}`;\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .storage\r\n        .from('event-images')\r\n        .upload(filePath, file, {\r\n          cacheControl: '3600',\r\n          upsert: false\r\n        });\r\n\r\n      if (error) throw error;\r\n\r\n      // Get public URL\r\n      const { data: { publicUrl } } = supabase\r\n        .storage\r\n        .from('event-images')\r\n        .getPublicUrl(filePath);\r\n\r\n      return publicUrl;\r\n    } catch (error) {\r\n      console.error('Upload error:', error);\r\n      message.error('Failed to upload image. Please try again.');\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      if (loading) return;\r\n      setLoading(true);\r\n      \r\n      const values = await form.validateFields();\r\n      \r\n      // Combine date and time\r\n      const eventDateTime = dayjs(values.date)\r\n        .hour(values.time.hour())\r\n        .minute(values.time.minute())\r\n        .toISOString();\r\n\r\n      // Upload image if exists\r\n      let imageUrl = null;\r\n      if (imageFile) {\r\n        imageUrl = await uploadImageToSupabase(imageFile);\r\n        console.log('Image URL:', imageUrl);\r\n      }\r\n\r\n      const submissionData = {\r\n        title: values.title,\r\n        description: values.description,\r\n        date_time: eventDateTime,\r\n        location: values.location,\r\n        category: values.category,\r\n        image_url: imageUrl,\r\n        user_id: user.id, // Changed from 'id' to 'user_id' for better clarity\r\n      };\r\n\r\n      console.log('Submitting data:', submissionData);\r\n\r\n      // Submit form data\r\n      const { error } = await supabase\r\n        .from('events') // Changed from 'event-form-request' to 'events'\r\n        .insert([submissionData]);\r\n\r\n      if (error) throw error;\r\n\r\n      message.success('Event created successfully!');\r\n      form.resetFields();\r\n      setImageFile(null);\r\n      setFormKey(prev => prev + 1);\r\n\r\n    } catch (error) {\r\n      console.error('Submission error:', error);\r\n      message.error(error.message || 'Failed to create event. Please try again.');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"event-form-container\">\r\n     \r\n\r\n      <Form \r\n        key={formKey}\r\n        form={form} \r\n        layout=\"vertical\"\r\n      >\r\n        <Row gutter={16}>\r\n          <Col span={12}>\r\n            <FormInput \r\n              label=\"Title\" \r\n              name=\"title\" \r\n              rules={[{ required: true, message: 'Please enter event title' }]} \r\n              type=\"text\" \r\n            />\r\n            \r\n            <FormInput \r\n              label=\"Description\" \r\n              name=\"description\" \r\n              rules={[{ required: true, message: 'Please enter event description' }]} \r\n              type=\"textarea\" \r\n              rows={4}\r\n            />\r\n\r\n            <Form.Item\r\n              label=\"Event Image\"\r\n              name=\"image\"\r\n              rules={[{ required: false }]}\r\n            >\r\n              <Upload\r\n                name=\"image\"\r\n                listType=\"picture\"\r\n                beforeUpload={beforeUpload}\r\n                onChange={handleImageChange}\r\n                maxCount={1}\r\n                accept=\"image/*\"\r\n                fileList={imageFile ? [{\r\n                  uid: '1',\r\n                  name: imageFile.name,\r\n                  status: 'done',\r\n                  originFileObj: imageFile\r\n                }] : []}\r\n              >\r\n                <Button icon={<UploadOutlined />}>Click to upload</Button>\r\n              </Upload>\r\n            </Form.Item>\r\n          </Col>\r\n          \r\n          <Col span={12}>\r\n            <Form.Item\r\n              label=\"Date\"\r\n              name=\"date\"\r\n              rules={[{ required: true, message: 'Please select event date' }]}\r\n            >\r\n              <DatePicker style={{ width: '100%' }} />\r\n            </Form.Item>\r\n            \r\n            <Form.Item\r\n              label=\"Time\"\r\n              name=\"time\"\r\n              rules={[{ required: true, message: 'Please select event time' }]}\r\n            >\r\n              <TimePicker style={{ width: '100%' }} format=\"HH:mm\" />\r\n            </Form.Item>\r\n            \r\n            <FormInput \r\n              label=\"Location\" \r\n              name=\"location\" \r\n              rules={[{ required: true, message: 'Please enter event location' }]} \r\n              type=\"text\" \r\n            />\r\n            \r\n            <FormInput \r\n              label=\"Category\" \r\n              name=\"category\" \r\n              rules={[{ required: true, message: 'Please select event category' }]} \r\n              type=\"select\" \r\n              options={categories}\r\n            />\r\n          </Col>\r\n        </Row>\r\n\r\n        <Form.Item style={{ marginTop: 24 }}>\r\n          <FormButton \r\n            type=\"primary\" \r\n            style={{ background: 'black' }}\r\n            onClick={handleSubmit}\r\n            loading={loading}\r\n          >\r\n            Create Event\r\n          </FormButton>\r\n        </Form.Item>\r\n      </Form>\r\n\r\n      <style jsx>{`\r\n        .event-form-container {\r\n          max-width: 800px;\r\n          margin: 0 auto;\r\n          padding: 24px;\r\n          background: #fff;\r\n          border-radius: 8px;\r\n          box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\r\n        }\r\n        .ant-upload.ant-upload-select-picture-card {\r\n          width: 100%;\r\n          margin-right: 0;\r\n        }\r\n      `}</style>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventForm;"
        }
    ]
}