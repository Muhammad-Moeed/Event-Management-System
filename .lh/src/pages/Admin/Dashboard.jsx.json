{
    "sourceFile": "src/pages/Admin/Dashboard.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 17,
            "patches": [
                {
                    "date": 1748290857915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748290926900,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n   },\r\n }));\r\n \r\n const statusConfig = {\r\n-  pending: { color: 'warning', icon: <MoreVert sx={{ color: '#ffb300' }} />,\r\n+  pending: { color: 'warning', icon: <MoreVert sx={{ color: '#ffb300' }} /> },\r\n   approved: { color: 'success', icon: <CheckCircle sx={{ color: '#4CAF50' }} /> },\r\n   rejected: { color: 'error', icon: <Cancel sx={{ color: '#F44336' }} /> }\r\n };\r\n \r\n"
                },
                {
                    "date": 1748291544491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,22 +117,32 @@\n     setError(null);\r\n     try {\r\n       let query = supabase\r\n         .from('event-form-request')\r\n-        .select('*')\r\n+        .select('*, profiles(full_name, email, avatar_url)')\r\n         .order('created_at', { ascending: false });\r\n \r\n       if (statusFilter !== 'all') query = query.eq('status', statusFilter);\r\n-      if (searchTerm) query = query.ilike('title', `%${searchTerm}%`);\r\n+      if (searchTerm) {\r\n+        query = query.or(\r\n+          `title.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,location.ilike.%${searchTerm}%`\r\n+        );\r\n+      }\r\n \r\n       const { data, error } = await query;\r\n \r\n       if (error) throw error;\r\n+      \r\n+      // Create users map from the joined data\r\n+      const userMap = {};\r\n+      data.forEach(event => {\r\n+        if (event.profiles) {\r\n+          userMap[event.user_id] = event.profiles;\r\n+        }\r\n+      });\r\n+      \r\n+      setUsers(userMap);\r\n       setEvents(data || []);\r\n-\r\n-      // Fetch user details for each event\r\n-      const userIds = [...new Set(data.map(event => event.user_id))];\r\n-      await fetchUserDetails(userIds);\r\n     } catch (err) {\r\n       console.error('Error:', err.message);\r\n       setError(err.message);\r\n       showSnackbar(err.message, 'error');\r\n@@ -140,49 +150,48 @@\n       setLoading(false);\r\n     }\r\n   };\r\n \r\n-  const fetchUserDetails = async (userIds) => {\r\n-    try {\r\n-      const { data, error } = await supabase\r\n-        .from('profiles')\r\n-        .select('id, full_name, email, avatar_url')\r\n-        .in('id', userIds);\r\n-\r\n-      if (error) throw error;\r\n-\r\n-      const userMap = {};\r\n-      data.forEach(user => {\r\n-        userMap[user.id] = user;\r\n-      });\r\n-      setUsers(userMap);\r\n-    } catch (err) {\r\n-      console.error('Error fetching user details:', err.message);\r\n-    }\r\n-  };\r\n-\r\n   const updateStatus = async (id, newStatus) => {\r\n     try {\r\n+      setLoading(true);\r\n       const { data, error } = await supabase\r\n         .from('event-form-request')\r\n-        .update({ status: newStatus })\r\n+        .update({ \r\n+          status: newStatus, \r\n+          updated_at: new Date().toISOString() \r\n+        })\r\n         .eq('id', id)\r\n-        .select();\r\n+        .select('*, profiles(full_name, email, avatar_url)');\r\n \r\n       if (error) throw error;\r\n \r\n-      setEvents(prev => prev.map(event =>\r\n-        event.id === id ? { ...event, status: newStatus } : event\r\n-      ));\r\n-      showSnackbar(`Status updated to ${newStatus}`, 'success');\r\n+      if (data && data.length > 0) {\r\n+        setEvents(prev => prev.map(event =>\r\n+          event.id === id ? data[0] : event\r\n+        ));\r\n+        \r\n+        // Update users map if needed\r\n+        if (data[0].profiles) {\r\n+          setUsers(prev => ({\r\n+            ...prev,\r\n+            [data[0].user_id]: data[0].profiles\r\n+          }));\r\n+        }\r\n+        \r\n+        showSnackbar(`Status updated to ${newStatus}`, 'success');\r\n+      }\r\n     } catch (err) {\r\n       console.error('Error:', err.message);\r\n       showSnackbar(`Update failed: ${err.message}`, 'error');\r\n+    } finally {\r\n+      setLoading(false);\r\n     }\r\n   };\r\n \r\n   const deleteEvent = async () => {\r\n     try {\r\n+      setLoading(true);\r\n       const { error } = await supabase\r\n         .from('event-form-request')\r\n         .delete()\r\n         .eq('id', deleteDialog.eventId);\r\n@@ -190,20 +199,23 @@\n       if (error) throw error;\r\n \r\n       setEvents(prev => prev.filter(event => event.id !== deleteDialog.eventId));\r\n       showSnackbar('Event deleted successfully', 'success');\r\n-      setDeleteDialog({ open: false, eventId: null });\r\n     } catch (err) {\r\n       console.error('Error:', err.message);\r\n       showSnackbar(`Delete failed: ${err.message}`, 'error');\r\n+    } finally {\r\n+      setLoading(false);\r\n+      setDeleteDialog({ open: false, eventId: null });\r\n     }\r\n   };\r\n \r\n   const fetchParticipants = async (eventId) => {\r\n     try {\r\n+      setLoading(true);\r\n       const { data, error } = await supabase\r\n         .from('event_participants')\r\n-        .select('*, profiles(full_name, email, avatar_url)')\r\n+        .select('*, profiles!inner(full_name, email, avatar_url)')\r\n         .eq('event_id', eventId);\r\n \r\n       if (error) throw error;\r\n \r\n@@ -214,8 +226,10 @@\n       });\r\n     } catch (err) {\r\n       console.error('Error:', err.message);\r\n       showSnackbar(`Failed to fetch participants: ${err.message}`, 'error');\r\n+    } finally {\r\n+      setLoading(false);\r\n     }\r\n   };\r\n \r\n   const showSnackbar = (message, severity) => {\r\n@@ -243,8 +257,9 @@\n   }, [statusFilter, searchTerm]);\r\n \r\n   const filteredEvents = events.filter(event =>\r\n     event.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n+    event.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n     event.location?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n     event.id?.toString().includes(searchTerm)\r\n   );\r\n \r\n@@ -711,10 +726,11 @@\n           <Button \r\n             onClick={deleteEvent} \r\n             color=\"error\"\r\n             variant=\"contained\"\r\n+            disabled={loading}\r\n           >\r\n-            Delete\r\n+            {loading ? <CircularProgress size={24} /> : 'Delete'}\r\n           </Button>\r\n         </DialogActions>\r\n       </Dialog>\r\n \r\n"
                },
                {
                    "date": 1748291701289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n     setError(null);\r\n     try {\r\n       let query = supabase\r\n         .from('event-form-request')\r\n-        .select('*, profiles(full_name, email, avatar_url)')\r\n+        .select('*, profiles(fi_name, email, avatar_url)')\r\n         .order('created_at', { ascending: false });\r\n \r\n       if (statusFilter !== 'all') query = query.eq('status', statusFilter);\r\n       if (searchTerm) {\r\n"
                },
                {
                    "date": 1748291708661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n     setError(null);\r\n     try {\r\n       let query = supabase\r\n         .from('event-form-request')\r\n-        .select('*, profiles(fi_name, email, avatar_url)')\r\n+        .select('*, profiles(first_name,last_name email, avatar_url)')\r\n         .order('created_at', { ascending: false });\r\n \r\n       if (statusFilter !== 'all') query = query.eq('status', statusFilter);\r\n       if (searchTerm) {\r\n"
                },
                {
                    "date": 1748291755402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n     setError(null);\r\n     try {\r\n       let query = supabase\r\n         .from('event-form-request')\r\n-        .select('*, profiles(first_name,last_name email, avatar_url)')\r\n+        .select('*, profiles(first_name,last_name, email, avatar_url)')\r\n         .order('created_at', { ascending: false });\r\n \r\n       if (statusFilter !== 'all') query = query.eq('status', statusFilter);\r\n       if (searchTerm) {\r\n"
                },
                {
                    "date": 1748291786830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,753 @@\n+import { useEffect, useState } from 'react';\r\n+import { useNavigate } from 'react-router-dom';\r\n+import supabase from '../../services/supabaseClient';\r\n+import {\r\n+  Box,\r\n+  Typography,\r\n+  Paper,\r\n+  Table,\r\n+  TableBody,\r\n+  TableCell,\r\n+  TableContainer,\r\n+  TableHead,\r\n+  TableRow,\r\n+  Button,\r\n+  Chip,\r\n+  CircularProgress,\r\n+  IconButton,\r\n+  Tooltip,\r\n+  TextField,\r\n+  InputAdornment,\r\n+  Pagination,\r\n+  Select,\r\n+  MenuItem,\r\n+  FormControl,\r\n+  InputLabel,\r\n+  Snackbar,\r\n+  Alert,\r\n+  Grid,\r\n+  Card,\r\n+  Avatar,\r\n+  Dialog,\r\n+  DialogTitle,\r\n+  DialogContent,\r\n+  DialogActions,\r\n+  List,\r\n+  ListItem,\r\n+  ListItemText,\r\n+  Divider,\r\n+  Badge\r\n+} from '@mui/material';\r\n+import {\r\n+  CheckCircle,\r\n+  Cancel,\r\n+  MoreVert,\r\n+  Visibility,\r\n+  Refresh,\r\n+  Search,\r\n+  Event,\r\n+  ThumbUp,\r\n+  ThumbDown,\r\n+  Delete,\r\n+  Edit,\r\n+  People,\r\n+  Person\r\n+} from '@mui/icons-material';\r\n+import { styled } from '@mui/material/styles';\r\n+import dayjs from 'dayjs';\r\n+\r\n+const themeColors = {\r\n+  primary: '#000000',\r\n+  secondary: '#ffb300',\r\n+  background: '#f5f5f5',\r\n+  paper: '#FFFFFF',\r\n+  text: '#000000',\r\n+  border: '#e0e0e0'\r\n+};\r\n+\r\n+const StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n+  '&:nth-of-type(odd)': {\r\n+    backgroundColor: '#fafafa',\r\n+  },\r\n+  '&:hover': {\r\n+    backgroundColor: '#f0f0f0',\r\n+  },\r\n+}));\r\n+\r\n+const statusConfig = {\r\n+  pending: { color: 'warning', icon: <MoreVert sx={{ color: '#ffb300' }} /> },\r\n+  approved: { color: 'success', icon: <CheckCircle sx={{ color: '#4CAF50' }} /> },\r\n+  rejected: { color: 'error', icon: <Cancel sx={{ color: '#F44336' }} /> }\r\n+};\r\n+\r\n+export default function AdminDashboard() {\r\n+  const navigate = useNavigate();\r\n+  const [events, setEvents] = useState([]);\r\n+  const [loading, setLoading] = useState(true);\r\n+  const [error, setError] = useState(null);\r\n+  const [page, setPage] = useState(1);\r\n+  const [rowsPerPage] = useState(8);\r\n+  const [searchTerm, setSearchTerm] = useState('');\r\n+  const [statusFilter, setStatusFilter] = useState('all');\r\n+  const [snackbar, setSnackbar] = useState({\r\n+    open: false,\r\n+    message: '',\r\n+    severity: 'success'\r\n+  });\r\n+  const [participantsDialog, setParticipantsDialog] = useState({\r\n+    open: false,\r\n+    eventId: null,\r\n+    participants: []\r\n+  });\r\n+  const [deleteDialog, setDeleteDialog] = useState({\r\n+    open: false,\r\n+    eventId: null\r\n+  });\r\n+  const [users, setUsers] = useState({});\r\n+\r\n+  const stats = {\r\n+    total: events.length,\r\n+    approved: events.filter(event => event.status === 'approved').length,\r\n+    rejected: events.filter(event => event.status === 'rejected').length,\r\n+    pending: events.filter(event => event.status === 'pending').length\r\n+  };\r\n+\r\n+  const fetchEvents = async () => {\r\n+    setLoading(true);\r\n+    setError(null);\r\n+    try {\r\n+      let query = supabase\r\n+        .from('event-form-request')\r\n+        .select('*, profiles(first_name,last_name, email, avatar_url)')\r\n+        .order('created_at', { ascending: false });\r\n+\r\n+      if (statusFilter !== 'all') query = query.eq('status', statusFilter);\r\n+      if (searchTerm) {\r\n+        query = query.or(\r\n+          `title.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,location.ilike.%${searchTerm}%`\r\n+        );\r\n+      }\r\n+\r\n+      const { data, error } = await query;\r\n+\r\n+      if (error) throw error;\r\n+      \r\n+      // Create users map from the joined data\r\n+      const userMap = {};\r\n+      data.forEach(event => {\r\n+        if (event.profiles) {\r\n+          userMap[event.user_id] = event.profiles;\r\n+        }\r\n+      });\r\n+      \r\n+      setUsers(userMap);\r\n+      setEvents(data || []);\r\n+    } catch (err) {\r\n+      console.error('Error:', err.message);\r\n+      setError(err.message);\r\n+      showSnackbar(err.message, 'error');\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const updateStatus = async (id, newStatus) => {\r\n+    try {\r\n+      setLoading(true);\r\n+      const { data, error } = await supabase\r\n+        .from('event-form-request')\r\n+        .update({ \r\n+          status: newStatus, \r\n+          updated_at: new Date().toISOString() \r\n+        })\r\n+        .eq('id', id)\r\n+        .select('*, profiles(first_name, email, avatar_url)');\r\n+\r\n+      if (error) throw error;\r\n+\r\n+      if (data && data.length > 0) {\r\n+        setEvents(prev => prev.map(event =>\r\n+          event.id === id ? data[0] : event\r\n+        ));\r\n+        \r\n+        // Update users map if needed\r\n+        if (data[0].profiles) {\r\n+          setUsers(prev => ({\r\n+            ...prev,\r\n+            [data[0].user_id]: data[0].profiles\r\n+          }));\r\n+        }\r\n+        \r\n+        showSnackbar(`Status updated to ${newStatus}`, 'success');\r\n+      }\r\n+    } catch (err) {\r\n+      console.error('Error:', err.message);\r\n+      showSnackbar(`Update failed: ${err.message}`, 'error');\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const deleteEvent = async () => {\r\n+    try {\r\n+      setLoading(true);\r\n+      const { error } = await supabase\r\n+        .from('event-form-request')\r\n+        .delete()\r\n+        .eq('id', deleteDialog.eventId);\r\n+\r\n+      if (error) throw error;\r\n+\r\n+      setEvents(prev => prev.filter(event => event.id !== deleteDialog.eventId));\r\n+      showSnackbar('Event deleted successfully', 'success');\r\n+    } catch (err) {\r\n+      console.error('Error:', err.message);\r\n+      showSnackbar(`Delete failed: ${err.message}`, 'error');\r\n+    } finally {\r\n+      setLoading(false);\r\n+      setDeleteDialog({ open: false, eventId: null });\r\n+    }\r\n+  };\r\n+\r\n+  const fetchParticipants = async (eventId) => {\r\n+    try {\r\n+      setLoading(true);\r\n+      const { data, error } = await supabase\r\n+        .from('event_participants')\r\n+        .select('*, profiles!inner(full_name, email, avatar_url)')\r\n+        .eq('event_id', eventId);\r\n+\r\n+      if (error) throw error;\r\n+\r\n+      setParticipantsDialog({\r\n+        open: true,\r\n+        eventId,\r\n+        participants: data || []\r\n+      });\r\n+    } catch (err) {\r\n+      console.error('Error:', err.message);\r\n+      showSnackbar(`Failed to fetch participants: ${err.message}`, 'error');\r\n+    } finally {\r\n+      setLoading(false);\r\n+    }\r\n+  };\r\n+\r\n+  const showSnackbar = (message, severity) => {\r\n+    setSnackbar({ open: true, message, severity });\r\n+  };\r\n+\r\n+  const handleCloseSnackbar = () => {\r\n+    setSnackbar(prev => ({ ...prev, open: false }));\r\n+  };\r\n+\r\n+  const handleViewDetails = (id) => {\r\n+    if (!id) {\r\n+      showSnackbar('Invalid event ID', 'error');\r\n+      return;\r\n+    }\r\n+    navigate(`/admin/event-detail/${id}`);\r\n+  };\r\n+\r\n+  const handleEditEvent = (id) => {\r\n+    navigate(`/admin/edit-event/${id}`);\r\n+  };\r\n+\r\n+  useEffect(() => {\r\n+    fetchEvents();\r\n+  }, [statusFilter, searchTerm]);\r\n+\r\n+  const filteredEvents = events.filter(event =>\r\n+    event.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n+    event.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n+    event.location?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n+    event.id?.toString().includes(searchTerm)\r\n+  );\r\n+\r\n+  const paginatedEvents = filteredEvents.slice(\r\n+    (page - 1) * rowsPerPage,\r\n+    page * rowsPerPage\r\n+  );\r\n+\r\n+  return (\r\n+    <Box sx={{\r\n+      p: 3,\r\n+      backgroundColor: themeColors.background,\r\n+      minHeight: '100vh',\r\n+      color: themeColors.text,\r\n+      margin: 0\r\n+    }}>\r\n+      {/* Header Section */}\r\n+      <Box sx={{\r\n+        display: 'flex',\r\n+        justifyContent: 'space-between',\r\n+        alignItems: 'center',\r\n+        mb: 3,\r\n+        padding: 0\r\n+      }}>\r\n+        <Typography variant=\"h4\" fontWeight=\"bold\" sx={{ color: 'white', backgroundColor: 'black', padding: 2, borderRadius: 2 }}>\r\n+          <span style={{ color: themeColors.secondary }}>Events</span> Management Dashboard\r\n+        </Typography>\r\n+        <Button\r\n+          variant=\"contained\"\r\n+          sx={{\r\n+            backgroundColor: themeColors.secondary,\r\n+            color: themeColors.primary,\r\n+            fontWeight: 'bold',\r\n+            px: 2.5,\r\n+            py: 1,\r\n+            borderRadius: 2,\r\n+            textTransform: 'none',\r\n+            boxShadow: '0 2px 6px rgba(0,0,0,0.2)',\r\n+            transition: 'all 0.3s ease',\r\n+            '&:hover': {\r\n+              backgroundColor: '#FFB300',\r\n+              transform: 'scale(1.03)',\r\n+              boxShadow: '0 4px 10px rgba(0,0,0,0.3)',\r\n+            },\r\n+            '&:active': {\r\n+              transform: 'scale(0.98)',\r\n+            },\r\n+          }}\r\n+          startIcon={loading ? <CircularProgress size={20} color=\"inherit\" /> : <Refresh />}\r\n+          disabled={loading}\r\n+          onClick={fetchEvents}\r\n+        >\r\n+          REFRESH\r\n+        </Button>\r\n+      </Box>\r\n+\r\n+      {/* Stats Cards */}\r\n+      <Grid container spacing={2} sx={{ mb: 3 }}>\r\n+        <Grid item xs={12} sm={6} md={3}>\r\n+          <Card sx={{\r\n+            p: 2,\r\n+            backgroundColor: themeColors.paper,\r\n+            borderLeft: `4px solid ${themeColors.secondary}`,\r\n+            boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n+          }}>\r\n+            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n+              <Avatar sx={{\r\n+                bgcolor: '#f5f5f5',\r\n+                mr: 2,\r\n+                color: themeColors.secondary\r\n+              }}>\r\n+                <Event />\r\n+              </Avatar>\r\n+              <Box>\r\n+                <Typography variant=\"body2\" color=\"textSecondary\">Total Events</Typography>\r\n+                <Typography variant=\"h5\" fontWeight=\"bold\">{stats.total}</Typography>\r\n+              </Box>\r\n+            </Box>\r\n+          </Card>\r\n+        </Grid>\r\n+\r\n+        <Grid item xs={12} sm={6} md={3}>\r\n+          <Card sx={{\r\n+            p: 2,\r\n+            backgroundColor: themeColors.paper,\r\n+            borderLeft: '4px solid #4CAF50',\r\n+            boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n+          }}>\r\n+            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n+              <Avatar sx={{\r\n+                bgcolor: '#f5f5f5',\r\n+                mr: 2,\r\n+                color: '#4CAF50'\r\n+              }}>\r\n+                <ThumbUp />\r\n+              </Avatar>\r\n+              <Box>\r\n+                <Typography variant=\"body2\" color=\"textSecondary\">Approved</Typography>\r\n+                <Typography variant=\"h5\" fontWeight=\"bold\">{stats.approved}</Typography>\r\n+              </Box>\r\n+            </Box>\r\n+          </Card>\r\n+        </Grid>\r\n+\r\n+        <Grid item xs={12} sm={6} md={3}>\r\n+          <Card sx={{\r\n+            p: 2,\r\n+            backgroundColor: themeColors.paper,\r\n+            borderLeft: '4px solid #F44336',\r\n+            boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n+          }}>\r\n+            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n+              <Avatar sx={{\r\n+                bgcolor: '#f5f5f5',\r\n+                mr: 2,\r\n+                color: '#F44336'\r\n+              }}>\r\n+                <ThumbDown />\r\n+              </Avatar>\r\n+              <Box>\r\n+                <Typography variant=\"body2\" color=\"textSecondary\">Rejected</Typography>\r\n+                <Typography variant=\"h5\" fontWeight=\"bold\">{stats.rejected}</Typography>\r\n+              </Box>\r\n+            </Box>\r\n+          </Card>\r\n+        </Grid>\r\n+\r\n+        <Grid item xs={12} sm={6} md={3}>\r\n+          <Card sx={{\r\n+            p: 2,\r\n+            backgroundColor: themeColors.paper,\r\n+            borderLeft: '4px solid #2196F3',\r\n+            boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n+          }}>\r\n+            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n+              <Avatar sx={{\r\n+                bgcolor: '#f5f5f5',\r\n+                mr: 2,\r\n+                color: '#2196F3'\r\n+              }}>\r\n+                <Person />\r\n+              </Avatar>\r\n+              <Box>\r\n+                <Typography variant=\"body2\" color=\"textSecondary\">Pending Review</Typography>\r\n+                <Typography variant=\"h5\" fontWeight=\"bold\">{stats.pending}</Typography>\r\n+              </Box>\r\n+            </Box>\r\n+          </Card>\r\n+        </Grid>\r\n+      </Grid>\r\n+\r\n+      {/* Filter Controls */}\r\n+      <Paper sx={{\r\n+        p: 2,\r\n+        mb: 3,\r\n+        display: 'flex',\r\n+        gap: 2,\r\n+        alignItems: 'center',\r\n+        backgroundColor: themeColors.paper,\r\n+        boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n+      }}>\r\n+        <TextField\r\n+          variant=\"outlined\"\r\n+          placeholder=\"Search events...\"\r\n+          size=\"small\"\r\n+          InputProps={{\r\n+            startAdornment: (\r\n+              <InputAdornment position=\"start\">\r\n+                <Search sx={{ color: themeColors.secondary }} />\r\n+              </InputAdornment>\r\n+            ),\r\n+            sx: {\r\n+              '& .MuiOutlinedInput-notchedOutline': {\r\n+                borderColor: themeColors.border\r\n+              }\r\n+            }\r\n+          }}\r\n+          value={searchTerm}\r\n+          onChange={(e) => setSearchTerm(e.target.value)}\r\n+          sx={{ flex: 1 }}\r\n+        />\r\n+\r\n+        <FormControl size=\"small\" sx={{ minWidth: 180 }}>\r\n+          <InputLabel>Filter by Status</InputLabel>\r\n+          <Select\r\n+            value={statusFilter}\r\n+            onChange={(e) => setStatusFilter(e.target.value)}\r\n+            label=\"Filter by Status\"\r\n+            sx={{\r\n+              color: themeColors,\r\n+              '& .MuiOutlinedInput-notchedOutline': {\r\n+                borderColor: 'black'\r\n+              },\r\n+              '& .MuiSvgIcon-root': {\r\n+                color: themeColors.text\r\n+              }\r\n+            }}\r\n+          >\r\n+            <MenuItem value=\"all\">All Status</MenuItem>\r\n+            <MenuItem value=\"pending\">Pending</MenuItem>\r\n+            <MenuItem value=\"approved\">Approved</MenuItem>\r\n+            <MenuItem value=\"rejected\">Rejected</MenuItem>\r\n+          </Select>\r\n+        </FormControl>\r\n+      </Paper>\r\n+\r\n+      {/* Main Content */}\r\n+      {loading && !events.length ? (\r\n+        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n+          <CircularProgress sx={{ color: themeColors.secondary }} />\r\n+        </Box>\r\n+      ) : error ? (\r\n+        <Paper sx={{\r\n+          p: 3,\r\n+          textAlign: 'center',\r\n+          backgroundColor: themeColors.paper,\r\n+          boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n+        }}>\r\n+          <Typography color=\"error\" gutterBottom>\r\n+            Error Loading Data\r\n+          </Typography>\r\n+          <Typography sx={{ mb: 2 }}>{error}</Typography>\r\n+          <Button\r\n+            variant=\"outlined\"\r\n+            onClick={fetchEvents}\r\n+            sx={{\r\n+              color: themeColors.secondary,\r\n+              borderColor: themeColors.secondary\r\n+            }}\r\n+          >\r\n+            Retry\r\n+          </Button>\r\n+        </Paper>\r\n+      ) : events.length === 0 ? (\r\n+        <Paper sx={{\r\n+          p: 3,\r\n+          textAlign: 'center',\r\n+          backgroundColor: themeColors.paper,\r\n+          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'\r\n+        }}>\r\n+          <Typography variant=\"h6\">\r\n+            No events found\r\n+          </Typography>\r\n+          <Typography color=\"textSecondary\">\r\n+            {statusFilter !== 'all'\r\n+              ? `No ${statusFilter} events available`\r\n+              : 'No events have been submitted yet'}\r\n+          </Typography>\r\n+        </Paper>\r\n+      ) : (\r\n+        <>\r\n+          <TableContainer\r\n+            component={Paper}\r\n+            sx={{\r\n+              mb: 2,\r\n+              backgroundColor: themeColors.paper,\r\n+              boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n+            }}\r\n+          >\r\n+            <Table>\r\n+              <TableHead sx={{ bgcolor: themeColors.primary }}>\r\n+                <TableRow>\r\n+                  <TableCell sx={{ color: themeColors.secondary }}>ID</TableCell>\r\n+                  <TableCell sx={{ color: themeColors.secondary }}>Event Title</TableCell>\r\n+                  <TableCell sx={{ color: themeColors.secondary }}>Organizer</TableCell>\r\n+                  <TableCell sx={{ color: themeColors.secondary }}>Location</TableCell>\r\n+                  <TableCell sx={{ color: themeColors.secondary }}>Category</TableCell>\r\n+                  <TableCell sx={{ color: themeColors.secondary }}>Status</TableCell>\r\n+                  <TableCell sx={{ color: themeColors.secondary }}>Date</TableCell>\r\n+                  <TableCell sx={{ color: themeColors.secondary }}>Actions</TableCell>\r\n+                </TableRow>\r\n+              </TableHead>\r\n+              <TableBody>\r\n+                {paginatedEvents.map((event) => (\r\n+                  <StyledTableRow key={event.id}>\r\n+                    <TableCell>#{event.id}</TableCell>\r\n+                    <TableCell>\r\n+                      <Typography fontWeight=\"medium\">\r\n+                        {event.title}\r\n+                      </Typography>\r\n+                      <Typography variant=\"body2\" color=\"textSecondary\">\r\n+                        {event.description?.substring(0, 50)}...\r\n+                      </Typography>\r\n+                    </TableCell>\r\n+                    <TableCell>\r\n+                      {users[event.user_id] ? (\r\n+                        <>\r\n+                          <Typography fontWeight=\"medium\">\r\n+                            {users[event.user_id].full_name}\r\n+                          </Typography>\r\n+                          <Typography variant=\"body2\" color=\"textSecondary\">\r\n+                            {users[event.user_id].email}\r\n+                          </Typography>\r\n+                        </>\r\n+                      ) : (\r\n+                        <Typography>Loading user...</Typography>\r\n+                      )}\r\n+                    </TableCell>\r\n+                    <TableCell>{event.location}</TableCell>\r\n+                    <TableCell>\r\n+                      <Chip label={event.category} size=\"small\" />\r\n+                    </TableCell>\r\n+                    <TableCell>\r\n+                      <Chip\r\n+                        label={event.status}\r\n+                        color={statusConfig[event.status]?.color || 'default'}\r\n+                        icon={statusConfig[event.status]?.icon}\r\n+                        size=\"small\"\r\n+                      />\r\n+                    </TableCell>\r\n+                    <TableCell>\r\n+                      {dayjs(event.created_at).format('DD MMM, YYYY')}\r\n+                    </TableCell>\r\n+                    <TableCell>\r\n+                      <Box sx={{ display: 'flex', gap: 1 }}>\r\n+                        <Tooltip title=\"View Details\">\r\n+                          <IconButton\r\n+                            sx={{ color: themeColors.primary }}\r\n+                            onClick={() => handleViewDetails(event.id)}\r\n+                          >\r\n+                            <Visibility />\r\n+                          </IconButton>\r\n+                        </Tooltip>\r\n+\r\n+                        <Tooltip title=\"Edit Event\">\r\n+                          <IconButton\r\n+                            sx={{ color: '#1976D2' }}\r\n+                            onClick={() => handleEditEvent(event.id)}\r\n+                          >\r\n+                            <Edit />\r\n+                          </IconButton>\r\n+                        </Tooltip>\r\n+\r\n+                        {event.status === 'approved' && (\r\n+                          <Tooltip title=\"View Participants\">\r\n+                            <IconButton\r\n+                              sx={{ color: '#9C27B0' }}\r\n+                              onClick={() => fetchParticipants(event.id)}\r\n+                            >\r\n+                              <Badge badgeContent={event.participants_count || 0} color=\"secondary\">\r\n+                                <People />\r\n+                              </Badge>\r\n+                            </IconButton>\r\n+                          </Tooltip>\r\n+                        )}\r\n+\r\n+                        {event.status !== 'approved' && (\r\n+                          <Tooltip title=\"Approve\">\r\n+                            <IconButton\r\n+                              sx={{ color: '#4CAF50' }}\r\n+                              onClick={() => updateStatus(event.id, 'approved')}\r\n+                            >\r\n+                              <CheckCircle />\r\n+                            </IconButton>\r\n+                          </Tooltip>\r\n+                        )}\r\n+\r\n+                        {event.status !== 'rejected' && (\r\n+                          <Tooltip title=\"Reject\">\r\n+                            <IconButton\r\n+                              sx={{ color: '#F44336' }}\r\n+                              onClick={() => updateStatus(event.id, 'rejected')}\r\n+                            >\r\n+                              <Cancel />\r\n+                            </IconButton>\r\n+                          </Tooltip>\r\n+                        )}\r\n+\r\n+                        <Tooltip title=\"Delete\">\r\n+                          <IconButton\r\n+                            sx={{ color: '#F44336' }}\r\n+                            onClick={() => setDeleteDialog({ open: true, eventId: event.id })}\r\n+                          >\r\n+                            <Delete />\r\n+                          </IconButton>\r\n+                        </Tooltip>\r\n+                      </Box>\r\n+                    </TableCell>\r\n+                  </StyledTableRow>\r\n+                ))}\r\n+              </TableBody>\r\n+            </Table>\r\n+          </TableContainer>\r\n+\r\n+          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>\r\n+            <Pagination\r\n+              count={Math.ceil(filteredEvents.length / rowsPerPage)}\r\n+              page={page}\r\n+              onChange={(_, value) => setPage(value)}\r\n+              sx={{\r\n+                '& .MuiPaginationItem-root': {\r\n+                  color: themeColors.text\r\n+                },\r\n+                '& .MuiPaginationItem-page.Mui-selected': {\r\n+                  backgroundColor: themeColors.secondary,\r\n+                  color: themeColors.primary\r\n+                }\r\n+              }}\r\n+            />\r\n+          </Box>\r\n+        </>\r\n+      )}\r\n+\r\n+      {/* Participants Dialog */}\r\n+      <Dialog\r\n+        open={participantsDialog.open}\r\n+        onClose={() => setParticipantsDialog({ open: false, eventId: null, participants: [] })}\r\n+        maxWidth=\"sm\"\r\n+        fullWidth\r\n+      >\r\n+        <DialogTitle>\r\n+          Participants for Event #{participantsDialog.eventId}\r\n+          <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n+            Total: {participantsDialog.participants.length}\r\n+          </Typography>\r\n+        </DialogTitle>\r\n+        <DialogContent dividers>\r\n+          <List>\r\n+            {participantsDialog.participants.length > 0 ? (\r\n+              participantsDialog.participants.map((participant, index) => (\r\n+                <div key={participant.id}>\r\n+                  <ListItem>\r\n+                    <Avatar \r\n+                      src={participant.profiles?.avatar_url} \r\n+                      sx={{ mr: 2 }}\r\n+                    />\r\n+                    <ListItemText\r\n+                      primary={participant.profiles?.full_name || 'Unknown User'}\r\n+                      secondary={participant.profiles?.email}\r\n+                    />\r\n+                  </ListItem>\r\n+                  {index < participantsDialog.participants.length - 1 && <Divider />}\r\n+                </div>\r\n+              ))\r\n+            ) : (\r\n+              <Typography variant=\"body2\" color=\"textSecondary\" sx={{ p: 2 }}>\r\n+                No participants registered for this event yet.\r\n+              </Typography>\r\n+            )}\r\n+          </List>\r\n+        </DialogContent>\r\n+        <DialogActions>\r\n+          <Button onClick={() => setParticipantsDialog({ open: false, eventId: null, participants: [] })}>\r\n+            Close\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      {/* Delete Confirmation Dialog */}\r\n+      <Dialog\r\n+        open={deleteDialog.open}\r\n+        onClose={() => setDeleteDialog({ open: false, eventId: null })}\r\n+      >\r\n+        <DialogTitle>Confirm Delete</DialogTitle>\r\n+        <DialogContent>\r\n+          <Typography>\r\n+            Are you sure you want to delete this event? This action cannot be undone.\r\n+          </Typography>\r\n+        </DialogContent>\r\n+        <DialogActions>\r\n+          <Button onClick={() => setDeleteDialog({ open: false, eventId: null })}>\r\n+            Cancel\r\n+          </Button>\r\n+          <Button \r\n+            onClick={deleteEvent} \r\n+            color=\"error\"\r\n+            variant=\"contained\"\r\n+            disabled={loading}\r\n+          >\r\n+            {loading ? <CircularProgress size={24} /> : 'Delete'}\r\n+          </Button>\r\n+        </DialogActions>\r\n+      </Dialog>\r\n+\r\n+      <Snackbar\r\n+        open={snackbar.open}\r\n+        autoHideDuration={6000}\r\n+        onClose={handleCloseSnackbar}\r\n+        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n+      >\r\n+        <Alert\r\n+          onClose={handleCloseSnackbar}\r\n+          severity={snackbar.severity}\r\n+          sx={{ width: '100%' }}\r\n+        >\r\n+          {snackbar.message}\r\n+        </Alert>\r\n+      </Snackbar>\r\n+    </Box>\r\n+  );\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748291793785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,9 @@\n           status: newStatus, \r\n           updated_at: new Date().toISOString() \r\n         })\r\n         .eq('id', id)\r\n-        .select('*, profiles(first_name, email, avatar_url)');\r\n+        .select('*, profiles(first_name,last_name, email, avatar_url)');\r\n \r\n       if (error) throw error;\r\n \r\n       if (data && data.length > 0) {\r\n@@ -749,758 +749,5 @@\n         </Alert>\r\n       </Snackbar>\r\n     </Box>\r\n   );\r\n-}\n-import { useEffect, useState } from 'react';\r\n-import { useNavigate } from 'react-router-dom';\r\n-import supabase from '../../services/supabaseClient';\r\n-import {\r\n-  Box,\r\n-  Typography,\r\n-  Paper,\r\n-  Table,\r\n-  TableBody,\r\n-  TableCell,\r\n-  TableContainer,\r\n-  TableHead,\r\n-  TableRow,\r\n-  Button,\r\n-  Chip,\r\n-  CircularProgress,\r\n-  IconButton,\r\n-  Tooltip,\r\n-  TextField,\r\n-  InputAdornment,\r\n-  Pagination,\r\n-  Select,\r\n-  MenuItem,\r\n-  FormControl,\r\n-  InputLabel,\r\n-  Snackbar,\r\n-  Alert,\r\n-  Grid,\r\n-  Card,\r\n-  Avatar,\r\n-  Dialog,\r\n-  DialogTitle,\r\n-  DialogContent,\r\n-  DialogActions,\r\n-  List,\r\n-  ListItem,\r\n-  ListItemText,\r\n-  Divider,\r\n-  Badge\r\n-} from '@mui/material';\r\n-import {\r\n-  CheckCircle,\r\n-  Cancel,\r\n-  MoreVert,\r\n-  Visibility,\r\n-  Refresh,\r\n-  Search,\r\n-  Event,\r\n-  ThumbUp,\r\n-  ThumbDown,\r\n-  Delete,\r\n-  Edit,\r\n-  People,\r\n-  Person\r\n-} from '@mui/icons-material';\r\n-import { styled } from '@mui/material/styles';\r\n-import dayjs from 'dayjs';\r\n-\r\n-const themeColors = {\r\n-  primary: '#000000',\r\n-  secondary: '#ffb300',\r\n-  background: '#f5f5f5',\r\n-  paper: '#FFFFFF',\r\n-  text: '#000000',\r\n-  border: '#e0e0e0'\r\n-};\r\n-\r\n-const StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n-  '&:nth-of-type(odd)': {\r\n-    backgroundColor: '#fafafa',\r\n-  },\r\n-  '&:hover': {\r\n-    backgroundColor: '#f0f0f0',\r\n-  },\r\n-}));\r\n-\r\n-const statusConfig = {\r\n-  pending: { color: 'warning', icon: <MoreVert sx={{ color: '#ffb300' }} /> },\r\n-  approved: { color: 'success', icon: <CheckCircle sx={{ color: '#4CAF50' }} /> },\r\n-  rejected: { color: 'error', icon: <Cancel sx={{ color: '#F44336' }} /> }\r\n-};\r\n-\r\n-export default function AdminDashboard() {\r\n-  const navigate = useNavigate();\r\n-  const [events, setEvents] = useState([]);\r\n-  const [loading, setLoading] = useState(true);\r\n-  const [error, setError] = useState(null);\r\n-  const [page, setPage] = useState(1);\r\n-  const [rowsPerPage] = useState(8);\r\n-  const [searchTerm, setSearchTerm] = useState('');\r\n-  const [statusFilter, setStatusFilter] = useState('all');\r\n-  const [snackbar, setSnackbar] = useState({\r\n-    open: false,\r\n-    message: '',\r\n-    severity: 'success'\r\n-  });\r\n-  const [participantsDialog, setParticipantsDialog] = useState({\r\n-    open: false,\r\n-    eventId: null,\r\n-    participants: []\r\n-  });\r\n-  const [deleteDialog, setDeleteDialog] = useState({\r\n-    open: false,\r\n-    eventId: null\r\n-  });\r\n-  const [users, setUsers] = useState({});\r\n-\r\n-  const stats = {\r\n-    total: events.length,\r\n-    approved: events.filter(event => event.status === 'approved').length,\r\n-    rejected: events.filter(event => event.status === 'rejected').length,\r\n-    pending: events.filter(event => event.status === 'pending').length\r\n-  };\r\n-\r\n-  const fetchEvents = async () => {\r\n-    setLoading(true);\r\n-    setError(null);\r\n-    try {\r\n-      let query = supabase\r\n-        .from('event-form-request')\r\n-        .select('*, profiles(first_name,last_name, email, avatar_url)')\r\n-        .order('created_at', { ascending: false });\r\n-\r\n-      if (statusFilter !== 'all') query = query.eq('status', statusFilter);\r\n-      if (searchTerm) {\r\n-        query = query.or(\r\n-          `title.ilike.%${searchTerm}%,description.ilike.%${searchTerm}%,location.ilike.%${searchTerm}%`\r\n-        );\r\n-      }\r\n-\r\n-      const { data, error } = await query;\r\n-\r\n-      if (error) throw error;\r\n-      \r\n-      // Create users map from the joined data\r\n-      const userMap = {};\r\n-      data.forEach(event => {\r\n-        if (event.profiles) {\r\n-          userMap[event.user_id] = event.profiles;\r\n-        }\r\n-      });\r\n-      \r\n-      setUsers(userMap);\r\n-      setEvents(data || []);\r\n-    } catch (err) {\r\n-      console.error('Error:', err.message);\r\n-      setError(err.message);\r\n-      showSnackbar(err.message, 'error');\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const updateStatus = async (id, newStatus) => {\r\n-    try {\r\n-      setLoading(true);\r\n-      const { data, error } = await supabase\r\n-        .from('event-form-request')\r\n-        .update({ \r\n-          status: newStatus, \r\n-          updated_at: new Date().toISOString() \r\n-        })\r\n-        .eq('id', id)\r\n-        .select('*, profiles(full_name, email, avatar_url)');\r\n-\r\n-      if (error) throw error;\r\n-\r\n-      if (data && data.length > 0) {\r\n-        setEvents(prev => prev.map(event =>\r\n-          event.id === id ? data[0] : event\r\n-        ));\r\n-        \r\n-        // Update users map if needed\r\n-        if (data[0].profiles) {\r\n-          setUsers(prev => ({\r\n-            ...prev,\r\n-            [data[0].user_id]: data[0].profiles\r\n-          }));\r\n-        }\r\n-        \r\n-        showSnackbar(`Status updated to ${newStatus}`, 'success');\r\n-      }\r\n-    } catch (err) {\r\n-      console.error('Error:', err.message);\r\n-      showSnackbar(`Update failed: ${err.message}`, 'error');\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const deleteEvent = async () => {\r\n-    try {\r\n-      setLoading(true);\r\n-      const { error } = await supabase\r\n-        .from('event-form-request')\r\n-        .delete()\r\n-        .eq('id', deleteDialog.eventId);\r\n-\r\n-      if (error) throw error;\r\n-\r\n-      setEvents(prev => prev.filter(event => event.id !== deleteDialog.eventId));\r\n-      showSnackbar('Event deleted successfully', 'success');\r\n-    } catch (err) {\r\n-      console.error('Error:', err.message);\r\n-      showSnackbar(`Delete failed: ${err.message}`, 'error');\r\n-    } finally {\r\n-      setLoading(false);\r\n-      setDeleteDialog({ open: false, eventId: null });\r\n-    }\r\n-  };\r\n-\r\n-  const fetchParticipants = async (eventId) => {\r\n-    try {\r\n-      setLoading(true);\r\n-      const { data, error } = await supabase\r\n-        .from('event_participants')\r\n-        .select('*, profiles!inner(full_name, email, avatar_url)')\r\n-        .eq('event_id', eventId);\r\n-\r\n-      if (error) throw error;\r\n-\r\n-      setParticipantsDialog({\r\n-        open: true,\r\n-        eventId,\r\n-        participants: data || []\r\n-      });\r\n-    } catch (err) {\r\n-      console.error('Error:', err.message);\r\n-      showSnackbar(`Failed to fetch participants: ${err.message}`, 'error');\r\n-    } finally {\r\n-      setLoading(false);\r\n-    }\r\n-  };\r\n-\r\n-  const showSnackbar = (message, severity) => {\r\n-    setSnackbar({ open: true, message, severity });\r\n-  };\r\n-\r\n-  const handleCloseSnackbar = () => {\r\n-    setSnackbar(prev => ({ ...prev, open: false }));\r\n-  };\r\n-\r\n-  const handleViewDetails = (id) => {\r\n-    if (!id) {\r\n-      showSnackbar('Invalid event ID', 'error');\r\n-      return;\r\n-    }\r\n-    navigate(`/admin/event-detail/${id}`);\r\n-  };\r\n-\r\n-  const handleEditEvent = (id) => {\r\n-    navigate(`/admin/edit-event/${id}`);\r\n-  };\r\n-\r\n-  useEffect(() => {\r\n-    fetchEvents();\r\n-  }, [statusFilter, searchTerm]);\r\n-\r\n-  const filteredEvents = events.filter(event =>\r\n-    event.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n-    event.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n-    event.location?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n-    event.id?.toString().includes(searchTerm)\r\n-  );\r\n-\r\n-  const paginatedEvents = filteredEvents.slice(\r\n-    (page - 1) * rowsPerPage,\r\n-    page * rowsPerPage\r\n-  );\r\n-\r\n-  return (\r\n-    <Box sx={{\r\n-      p: 3,\r\n-      backgroundColor: themeColors.background,\r\n-      minHeight: '100vh',\r\n-      color: themeColors.text,\r\n-      margin: 0\r\n-    }}>\r\n-      {/* Header Section */}\r\n-      <Box sx={{\r\n-        display: 'flex',\r\n-        justifyContent: 'space-between',\r\n-        alignItems: 'center',\r\n-        mb: 3,\r\n-        padding: 0\r\n-      }}>\r\n-        <Typography variant=\"h4\" fontWeight=\"bold\" sx={{ color: 'white', backgroundColor: 'black', padding: 2, borderRadius: 2 }}>\r\n-          <span style={{ color: themeColors.secondary }}>Events</span> Management Dashboard\r\n-        </Typography>\r\n-        <Button\r\n-          variant=\"contained\"\r\n-          sx={{\r\n-            backgroundColor: themeColors.secondary,\r\n-            color: themeColors.primary,\r\n-            fontWeight: 'bold',\r\n-            px: 2.5,\r\n-            py: 1,\r\n-            borderRadius: 2,\r\n-            textTransform: 'none',\r\n-            boxShadow: '0 2px 6px rgba(0,0,0,0.2)',\r\n-            transition: 'all 0.3s ease',\r\n-            '&:hover': {\r\n-              backgroundColor: '#FFB300',\r\n-              transform: 'scale(1.03)',\r\n-              boxShadow: '0 4px 10px rgba(0,0,0,0.3)',\r\n-            },\r\n-            '&:active': {\r\n-              transform: 'scale(0.98)',\r\n-            },\r\n-          }}\r\n-          startIcon={loading ? <CircularProgress size={20} color=\"inherit\" /> : <Refresh />}\r\n-          disabled={loading}\r\n-          onClick={fetchEvents}\r\n-        >\r\n-          REFRESH\r\n-        </Button>\r\n-      </Box>\r\n-\r\n-      {/* Stats Cards */}\r\n-      <Grid container spacing={2} sx={{ mb: 3 }}>\r\n-        <Grid item xs={12} sm={6} md={3}>\r\n-          <Card sx={{\r\n-            p: 2,\r\n-            backgroundColor: themeColors.paper,\r\n-            borderLeft: `4px solid ${themeColors.secondary}`,\r\n-            boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n-          }}>\r\n-            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n-              <Avatar sx={{\r\n-                bgcolor: '#f5f5f5',\r\n-                mr: 2,\r\n-                color: themeColors.secondary\r\n-              }}>\r\n-                <Event />\r\n-              </Avatar>\r\n-              <Box>\r\n-                <Typography variant=\"body2\" color=\"textSecondary\">Total Events</Typography>\r\n-                <Typography variant=\"h5\" fontWeight=\"bold\">{stats.total}</Typography>\r\n-              </Box>\r\n-            </Box>\r\n-          </Card>\r\n-        </Grid>\r\n-\r\n-        <Grid item xs={12} sm={6} md={3}>\r\n-          <Card sx={{\r\n-            p: 2,\r\n-            backgroundColor: themeColors.paper,\r\n-            borderLeft: '4px solid #4CAF50',\r\n-            boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n-          }}>\r\n-            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n-              <Avatar sx={{\r\n-                bgcolor: '#f5f5f5',\r\n-                mr: 2,\r\n-                color: '#4CAF50'\r\n-              }}>\r\n-                <ThumbUp />\r\n-              </Avatar>\r\n-              <Box>\r\n-                <Typography variant=\"body2\" color=\"textSecondary\">Approved</Typography>\r\n-                <Typography variant=\"h5\" fontWeight=\"bold\">{stats.approved}</Typography>\r\n-              </Box>\r\n-            </Box>\r\n-          </Card>\r\n-        </Grid>\r\n-\r\n-        <Grid item xs={12} sm={6} md={3}>\r\n-          <Card sx={{\r\n-            p: 2,\r\n-            backgroundColor: themeColors.paper,\r\n-            borderLeft: '4px solid #F44336',\r\n-            boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n-          }}>\r\n-            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n-              <Avatar sx={{\r\n-                bgcolor: '#f5f5f5',\r\n-                mr: 2,\r\n-                color: '#F44336'\r\n-              }}>\r\n-                <ThumbDown />\r\n-              </Avatar>\r\n-              <Box>\r\n-                <Typography variant=\"body2\" color=\"textSecondary\">Rejected</Typography>\r\n-                <Typography variant=\"h5\" fontWeight=\"bold\">{stats.rejected}</Typography>\r\n-              </Box>\r\n-            </Box>\r\n-          </Card>\r\n-        </Grid>\r\n-\r\n-        <Grid item xs={12} sm={6} md={3}>\r\n-          <Card sx={{\r\n-            p: 2,\r\n-            backgroundColor: themeColors.paper,\r\n-            borderLeft: '4px solid #2196F3',\r\n-            boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n-          }}>\r\n-            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n-              <Avatar sx={{\r\n-                bgcolor: '#f5f5f5',\r\n-                mr: 2,\r\n-                color: '#2196F3'\r\n-              }}>\r\n-                <Person />\r\n-              </Avatar>\r\n-              <Box>\r\n-                <Typography variant=\"body2\" color=\"textSecondary\">Pending Review</Typography>\r\n-                <Typography variant=\"h5\" fontWeight=\"bold\">{stats.pending}</Typography>\r\n-              </Box>\r\n-            </Box>\r\n-          </Card>\r\n-        </Grid>\r\n-      </Grid>\r\n-\r\n-      {/* Filter Controls */}\r\n-      <Paper sx={{\r\n-        p: 2,\r\n-        mb: 3,\r\n-        display: 'flex',\r\n-        gap: 2,\r\n-        alignItems: 'center',\r\n-        backgroundColor: themeColors.paper,\r\n-        boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n-      }}>\r\n-        <TextField\r\n-          variant=\"outlined\"\r\n-          placeholder=\"Search events...\"\r\n-          size=\"small\"\r\n-          InputProps={{\r\n-            startAdornment: (\r\n-              <InputAdornment position=\"start\">\r\n-                <Search sx={{ color: themeColors.secondary }} />\r\n-              </InputAdornment>\r\n-            ),\r\n-            sx: {\r\n-              '& .MuiOutlinedInput-notchedOutline': {\r\n-                borderColor: themeColors.border\r\n-              }\r\n-            }\r\n-          }}\r\n-          value={searchTerm}\r\n-          onChange={(e) => setSearchTerm(e.target.value)}\r\n-          sx={{ flex: 1 }}\r\n-        />\r\n-\r\n-        <FormControl size=\"small\" sx={{ minWidth: 180 }}>\r\n-          <InputLabel>Filter by Status</InputLabel>\r\n-          <Select\r\n-            value={statusFilter}\r\n-            onChange={(e) => setStatusFilter(e.target.value)}\r\n-            label=\"Filter by Status\"\r\n-            sx={{\r\n-              color: themeColors,\r\n-              '& .MuiOutlinedInput-notchedOutline': {\r\n-                borderColor: 'black'\r\n-              },\r\n-              '& .MuiSvgIcon-root': {\r\n-                color: themeColors.text\r\n-              }\r\n-            }}\r\n-          >\r\n-            <MenuItem value=\"all\">All Status</MenuItem>\r\n-            <MenuItem value=\"pending\">Pending</MenuItem>\r\n-            <MenuItem value=\"approved\">Approved</MenuItem>\r\n-            <MenuItem value=\"rejected\">Rejected</MenuItem>\r\n-          </Select>\r\n-        </FormControl>\r\n-      </Paper>\r\n-\r\n-      {/* Main Content */}\r\n-      {loading && !events.length ? (\r\n-        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n-          <CircularProgress sx={{ color: themeColors.secondary }} />\r\n-        </Box>\r\n-      ) : error ? (\r\n-        <Paper sx={{\r\n-          p: 3,\r\n-          textAlign: 'center',\r\n-          backgroundColor: themeColors.paper,\r\n-          boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n-        }}>\r\n-          <Typography color=\"error\" gutterBottom>\r\n-            Error Loading Data\r\n-          </Typography>\r\n-          <Typography sx={{ mb: 2 }}>{error}</Typography>\r\n-          <Button\r\n-            variant=\"outlined\"\r\n-            onClick={fetchEvents}\r\n-            sx={{\r\n-              color: themeColors.secondary,\r\n-              borderColor: themeColors.secondary\r\n-            }}\r\n-          >\r\n-            Retry\r\n-          </Button>\r\n-        </Paper>\r\n-      ) : events.length === 0 ? (\r\n-        <Paper sx={{\r\n-          p: 3,\r\n-          textAlign: 'center',\r\n-          backgroundColor: themeColors.paper,\r\n-          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'\r\n-        }}>\r\n-          <Typography variant=\"h6\">\r\n-            No events found\r\n-          </Typography>\r\n-          <Typography color=\"textSecondary\">\r\n-            {statusFilter !== 'all'\r\n-              ? `No ${statusFilter} events available`\r\n-              : 'No events have been submitted yet'}\r\n-          </Typography>\r\n-        </Paper>\r\n-      ) : (\r\n-        <>\r\n-          <TableContainer\r\n-            component={Paper}\r\n-            sx={{\r\n-              mb: 2,\r\n-              backgroundColor: themeColors.paper,\r\n-              boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n-            }}\r\n-          >\r\n-            <Table>\r\n-              <TableHead sx={{ bgcolor: themeColors.primary }}>\r\n-                <TableRow>\r\n-                  <TableCell sx={{ color: themeColors.secondary }}>ID</TableCell>\r\n-                  <TableCell sx={{ color: themeColors.secondary }}>Event Title</TableCell>\r\n-                  <TableCell sx={{ color: themeColors.secondary }}>Organizer</TableCell>\r\n-                  <TableCell sx={{ color: themeColors.secondary }}>Location</TableCell>\r\n-                  <TableCell sx={{ color: themeColors.secondary }}>Category</TableCell>\r\n-                  <TableCell sx={{ color: themeColors.secondary }}>Status</TableCell>\r\n-                  <TableCell sx={{ color: themeColors.secondary }}>Date</TableCell>\r\n-                  <TableCell sx={{ color: themeColors.secondary }}>Actions</TableCell>\r\n-                </TableRow>\r\n-              </TableHead>\r\n-              <TableBody>\r\n-                {paginatedEvents.map((event) => (\r\n-                  <StyledTableRow key={event.id}>\r\n-                    <TableCell>#{event.id}</TableCell>\r\n-                    <TableCell>\r\n-                      <Typography fontWeight=\"medium\">\r\n-                        {event.title}\r\n-                      </Typography>\r\n-                      <Typography variant=\"body2\" color=\"textSecondary\">\r\n-                        {event.description?.substring(0, 50)}...\r\n-                      </Typography>\r\n-                    </TableCell>\r\n-                    <TableCell>\r\n-                      {users[event.user_id] ? (\r\n-                        <>\r\n-                          <Typography fontWeight=\"medium\">\r\n-                            {users[event.user_id].full_name}\r\n-                          </Typography>\r\n-                          <Typography variant=\"body2\" color=\"textSecondary\">\r\n-                            {users[event.user_id].email}\r\n-                          </Typography>\r\n-                        </>\r\n-                      ) : (\r\n-                        <Typography>Loading user...</Typography>\r\n-                      )}\r\n-                    </TableCell>\r\n-                    <TableCell>{event.location}</TableCell>\r\n-                    <TableCell>\r\n-                      <Chip label={event.category} size=\"small\" />\r\n-                    </TableCell>\r\n-                    <TableCell>\r\n-                      <Chip\r\n-                        label={event.status}\r\n-                        color={statusConfig[event.status]?.color || 'default'}\r\n-                        icon={statusConfig[event.status]?.icon}\r\n-                        size=\"small\"\r\n-                      />\r\n-                    </TableCell>\r\n-                    <TableCell>\r\n-                      {dayjs(event.created_at).format('DD MMM, YYYY')}\r\n-                    </TableCell>\r\n-                    <TableCell>\r\n-                      <Box sx={{ display: 'flex', gap: 1 }}>\r\n-                        <Tooltip title=\"View Details\">\r\n-                          <IconButton\r\n-                            sx={{ color: themeColors.primary }}\r\n-                            onClick={() => handleViewDetails(event.id)}\r\n-                          >\r\n-                            <Visibility />\r\n-                          </IconButton>\r\n-                        </Tooltip>\r\n-\r\n-                        <Tooltip title=\"Edit Event\">\r\n-                          <IconButton\r\n-                            sx={{ color: '#1976D2' }}\r\n-                            onClick={() => handleEditEvent(event.id)}\r\n-                          >\r\n-                            <Edit />\r\n-                          </IconButton>\r\n-                        </Tooltip>\r\n-\r\n-                        {event.status === 'approved' && (\r\n-                          <Tooltip title=\"View Participants\">\r\n-                            <IconButton\r\n-                              sx={{ color: '#9C27B0' }}\r\n-                              onClick={() => fetchParticipants(event.id)}\r\n-                            >\r\n-                              <Badge badgeContent={event.participants_count || 0} color=\"secondary\">\r\n-                                <People />\r\n-                              </Badge>\r\n-                            </IconButton>\r\n-                          </Tooltip>\r\n-                        )}\r\n-\r\n-                        {event.status !== 'approved' && (\r\n-                          <Tooltip title=\"Approve\">\r\n-                            <IconButton\r\n-                              sx={{ color: '#4CAF50' }}\r\n-                              onClick={() => updateStatus(event.id, 'approved')}\r\n-                            >\r\n-                              <CheckCircle />\r\n-                            </IconButton>\r\n-                          </Tooltip>\r\n-                        )}\r\n-\r\n-                        {event.status !== 'rejected' && (\r\n-                          <Tooltip title=\"Reject\">\r\n-                            <IconButton\r\n-                              sx={{ color: '#F44336' }}\r\n-                              onClick={() => updateStatus(event.id, 'rejected')}\r\n-                            >\r\n-                              <Cancel />\r\n-                            </IconButton>\r\n-                          </Tooltip>\r\n-                        )}\r\n-\r\n-                        <Tooltip title=\"Delete\">\r\n-                          <IconButton\r\n-                            sx={{ color: '#F44336' }}\r\n-                            onClick={() => setDeleteDialog({ open: true, eventId: event.id })}\r\n-                          >\r\n-                            <Delete />\r\n-                          </IconButton>\r\n-                        </Tooltip>\r\n-                      </Box>\r\n-                    </TableCell>\r\n-                  </StyledTableRow>\r\n-                ))}\r\n-              </TableBody>\r\n-            </Table>\r\n-          </TableContainer>\r\n-\r\n-          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>\r\n-            <Pagination\r\n-              count={Math.ceil(filteredEvents.length / rowsPerPage)}\r\n-              page={page}\r\n-              onChange={(_, value) => setPage(value)}\r\n-              sx={{\r\n-                '& .MuiPaginationItem-root': {\r\n-                  color: themeColors.text\r\n-                },\r\n-                '& .MuiPaginationItem-page.Mui-selected': {\r\n-                  backgroundColor: themeColors.secondary,\r\n-                  color: themeColors.primary\r\n-                }\r\n-              }}\r\n-            />\r\n-          </Box>\r\n-        </>\r\n-      )}\r\n-\r\n-      {/* Participants Dialog */}\r\n-      <Dialog\r\n-        open={participantsDialog.open}\r\n-        onClose={() => setParticipantsDialog({ open: false, eventId: null, participants: [] })}\r\n-        maxWidth=\"sm\"\r\n-        fullWidth\r\n-      >\r\n-        <DialogTitle>\r\n-          Participants for Event #{participantsDialog.eventId}\r\n-          <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n-            Total: {participantsDialog.participants.length}\r\n-          </Typography>\r\n-        </DialogTitle>\r\n-        <DialogContent dividers>\r\n-          <List>\r\n-            {participantsDialog.participants.length > 0 ? (\r\n-              participantsDialog.participants.map((participant, index) => (\r\n-                <div key={participant.id}>\r\n-                  <ListItem>\r\n-                    <Avatar \r\n-                      src={participant.profiles?.avatar_url} \r\n-                      sx={{ mr: 2 }}\r\n-                    />\r\n-                    <ListItemText\r\n-                      primary={participant.profiles?.full_name || 'Unknown User'}\r\n-                      secondary={participant.profiles?.email}\r\n-                    />\r\n-                  </ListItem>\r\n-                  {index < participantsDialog.participants.length - 1 && <Divider />}\r\n-                </div>\r\n-              ))\r\n-            ) : (\r\n-              <Typography variant=\"body2\" color=\"textSecondary\" sx={{ p: 2 }}>\r\n-                No participants registered for this event yet.\r\n-              </Typography>\r\n-            )}\r\n-          </List>\r\n-        </DialogContent>\r\n-        <DialogActions>\r\n-          <Button onClick={() => setParticipantsDialog({ open: false, eventId: null, participants: [] })}>\r\n-            Close\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      {/* Delete Confirmation Dialog */}\r\n-      <Dialog\r\n-        open={deleteDialog.open}\r\n-        onClose={() => setDeleteDialog({ open: false, eventId: null })}\r\n-      >\r\n-        <DialogTitle>Confirm Delete</DialogTitle>\r\n-        <DialogContent>\r\n-          <Typography>\r\n-            Are you sure you want to delete this event? This action cannot be undone.\r\n-          </Typography>\r\n-        </DialogContent>\r\n-        <DialogActions>\r\n-          <Button onClick={() => setDeleteDialog({ open: false, eventId: null })}>\r\n-            Cancel\r\n-          </Button>\r\n-          <Button \r\n-            onClick={deleteEvent} \r\n-            color=\"error\"\r\n-            variant=\"contained\"\r\n-            disabled={loading}\r\n-          >\r\n-            {loading ? <CircularProgress size={24} /> : 'Delete'}\r\n-          </Button>\r\n-        </DialogActions>\r\n-      </Dialog>\r\n-\r\n-      <Snackbar\r\n-        open={snackbar.open}\r\n-        autoHideDuration={6000}\r\n-        onClose={handleCloseSnackbar}\r\n-        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n-      >\r\n-        <Alert\r\n-          onClose={handleCloseSnackbar}\r\n-          severity={snackbar.severity}\r\n-          sx={{ width: '100%' }}\r\n-        >\r\n-          {snackbar.message}\r\n-        </Alert>\r\n-      </Snackbar>\r\n-    </Box>\r\n-  );\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1748291799967,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,9 @@\n     try {\r\n       setLoading(true);\r\n       const { data, error } = await supabase\r\n         .from('event_participants')\r\n-        .select('*, profiles!inner(full_name, email, avatar_url)')\r\n+        .select('*, profiles!inner(full_nam, email, avatar_url)')\r\n         .eq('event_id', eventId);\r\n \r\n       if (error) throw error;\r\n \r\n"
                },
                {
                    "date": 1748291810310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,9 @@\n     try {\r\n       setLoading(true);\r\n       const { data, error } = await supabase\r\n         .from('event_participants')\r\n-        .select('*, profiles!inner(full_nam, email, avatar_url)')\r\n+        .select('*, profiles!inner(first_name,last_name, email, avatar_url)')\r\n         .eq('event_id', eventId);\r\n \r\n       if (error) throw error;\r\n \r\n"
                },
                {
                    "date": 1748291818402,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -686,9 +686,9 @@\n                       src={participant.profiles?.avatar_url} \r\n                       sx={{ mr: 2 }}\r\n                     />\r\n                     <ListItemText\r\n-                      primary={participant.profiles?.full_name || 'Unknown User'}\r\n+                      primary={participant.profiles?.f || 'Unknown User'}\r\n                       secondary={participant.profiles?.email}\r\n                     />\r\n                   </ListItem>\r\n                   {index < participantsDialog.participants.length - 1 && <Divider />}\r\n"
                },
                {
                    "date": 1748291824198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -686,9 +686,9 @@\n                       src={participant.profiles?.avatar_url} \r\n                       sx={{ mr: 2 }}\r\n                     />\r\n                     <ListItemText\r\n-                      primary={participant.profiles?.f || 'Unknown User'}\r\n+                      primary={participant.profiles?.first_name || 'Unknown User'}\r\n                       secondary={participant.profiles?.email}\r\n                     />\r\n                   </ListItem>\r\n                   {index < participantsDialog.participants.length - 1 && <Divider />}\r\n"
                },
                {
                    "date": 1748291901135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,9 @@\n     try {\r\n       setLoading(true);\r\n       const { data, error } = await supabase\r\n         .from('event_participants')\r\n-        .select('*, profiles!inner(first_name,last_name, email, avatar_url)')\r\n+        .select('*, profiles!inner(_name,last_name, email, avatar_url)')\r\n         .eq('event_id', eventId);\r\n \r\n       if (error) throw error;\r\n \r\n"
                },
                {
                    "date": 1748291908227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,9 @@\n     try {\r\n       setLoading(true);\r\n       const { data, error } = await supabase\r\n         .from('event_participants')\r\n-        .select('*, profiles!inner(_name,last_name, email, avatar_url)')\r\n+        .select('*, profiles!inner(full_name, email, avatar_url)')\r\n         .eq('event_id', eventId);\r\n \r\n       if (error) throw error;\r\n \r\n"
                },
                {
                    "date": 1748291935806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,9 @@\n     try {\r\n       setLoading(true);\r\n       const { data, error } = await supabase\r\n         .from('event_participants')\r\n-        .select('*, profiles!inner(full_name, email, avatar_url)')\r\n+        .select('*, profiles!inner(full_name, email,phone, avatar_url)')\r\n         .eq('event_id', eventId);\r\n \r\n       if (error) throw error;\r\n \r\n"
                },
                {
                    "date": 1748291952291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -213,9 +213,9 @@\n     try {\r\n       setLoading(true);\r\n       const { data, error } = await supabase\r\n         .from('event_participants')\r\n-        .select('*, profiles!inner(full_name, email,phone, avatar_url)')\r\n+        .select('*, profiles!inner(full_name, email,phone, event_)')\r\n         .eq('event_id', eventId);\r\n \r\n       if (error) throw error;\r\n \r\n"
                },
                {
                    "date": 1748292500483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,8 @@\n   const [deleteDialog, setDeleteDialog] = useState({\r\n     open: false,\r\n     eventId: null\r\n   });\r\n-  const [users, setUsers] = useState({});\r\n \r\n   const stats = {\r\n     total: events.length,\r\n     approved: events.filter(event => event.status === 'approved').length,\r\n@@ -117,9 +116,9 @@\n     setError(null);\r\n     try {\r\n       let query = supabase\r\n         .from('event-form-request')\r\n-        .select('*, profiles(first_name,last_name, email, avatar_url)')\r\n+        .select('*')\r\n         .order('created_at', { ascending: false });\r\n \r\n       if (statusFilter !== 'all') query = query.eq('status', statusFilter);\r\n       if (searchTerm) {\r\n@@ -130,18 +129,8 @@\n \r\n       const { data, error } = await query;\r\n \r\n       if (error) throw error;\r\n-      \r\n-      // Create users map from the joined data\r\n-      const userMap = {};\r\n-      data.forEach(event => {\r\n-        if (event.profiles) {\r\n-          userMap[event.user_id] = event.profiles;\r\n-        }\r\n-      });\r\n-      \r\n-      setUsers(userMap);\r\n       setEvents(data || []);\r\n     } catch (err) {\r\n       console.error('Error:', err.message);\r\n       setError(err.message);\r\n@@ -152,40 +141,44 @@\n   };\r\n \r\n   const updateStatus = async (id, newStatus) => {\r\n     try {\r\n-      setLoading(true);\r\n+      // Set loading state for the specific event\r\n+      setEvents(prev => prev.map(event => \r\n+        event.id === id ? { ...event, loading: true } : event\r\n+      ));\r\n+\r\n+      // Update in Supabase\r\n       const { data, error } = await supabase\r\n         .from('event-form-request')\r\n         .update({ \r\n-          status: newStatus, \r\n-          updated_at: new Date().toISOString() \r\n+          status: newStatus,\r\n+          updated_at: new Date().toISOString()\r\n         })\r\n         .eq('id', id)\r\n-        .select('*, profiles(first_name,last_name, email, avatar_url)');\r\n+        .select();\r\n \r\n       if (error) throw error;\r\n+      if (!data || data.length === 0) throw new Error('Update failed');\r\n \r\n-      if (data && data.length > 0) {\r\n-        setEvents(prev => prev.map(event =>\r\n-          event.id === id ? data[0] : event\r\n-        ));\r\n-        \r\n-        // Update users map if needed\r\n-        if (data[0].profiles) {\r\n-          setUsers(prev => ({\r\n-            ...prev,\r\n-            [data[0].user_id]: data[0].profiles\r\n-          }));\r\n-        }\r\n-        \r\n-        showSnackbar(`Status updated to ${newStatus}`, 'success');\r\n-      }\r\n+      // Update UI after successful Supabase update\r\n+      setEvents(prev => prev.map(event =>\r\n+        event.id === id ? { ...data[0], loading: false } : event\r\n+      ));\r\n+\r\n+      showSnackbar(`Status updated to ${newStatus}`, 'success');\r\n     } catch (err) {\r\n-      console.error('Error:', err.message);\r\n+      console.error('Update error:', err.message);\r\n+      \r\n+      // Revert UI if Supabase update failed\r\n+      setEvents(prev => prev.map(event => \r\n+        event.id === id ? { ...event, loading: false } : event\r\n+      ));\r\n+      \r\n       showSnackbar(`Update failed: ${err.message}`, 'error');\r\n-    } finally {\r\n-      setLoading(false);\r\n+      \r\n+      // Refresh data to sync with server\r\n+      fetchEvents();\r\n     }\r\n   };\r\n \r\n   const deleteEvent = async () => {\r\n@@ -213,9 +206,9 @@\n     try {\r\n       setLoading(true);\r\n       const { data, error } = await supabase\r\n         .from('event_participants')\r\n-        .select('*, profiles!inner(full_name, email,phone, event_id)')\r\n+        .select('*, profiles(full_name, email, avatar_url)')\r\n         .eq('event_id', eventId);\r\n \r\n       if (error) throw error;\r\n \r\n@@ -240,12 +233,8 @@\n     setSnackbar(prev => ({ ...prev, open: false }));\r\n   };\r\n \r\n   const handleViewDetails = (id) => {\r\n-    if (!id) {\r\n-      showSnackbar('Invalid event ID', 'error');\r\n-      return;\r\n-    }\r\n     navigate(`/admin/event-detail/${id}`);\r\n   };\r\n \r\n   const handleEditEvent = (id) => {\r\n@@ -523,9 +512,8 @@\n               <TableHead sx={{ bgcolor: themeColors.primary }}>\r\n                 <TableRow>\r\n                   <TableCell sx={{ color: themeColors.secondary }}>ID</TableCell>\r\n                   <TableCell sx={{ color: themeColors.secondary }}>Event Title</TableCell>\r\n-                  <TableCell sx={{ color: themeColors.secondary }}>Organizer</TableCell>\r\n                   <TableCell sx={{ color: themeColors.secondary }}>Location</TableCell>\r\n                   <TableCell sx={{ color: themeColors.secondary }}>Category</TableCell>\r\n                   <TableCell sx={{ color: themeColors.secondary }}>Status</TableCell>\r\n                   <TableCell sx={{ color: themeColors.secondary }}>Date</TableCell>\r\n@@ -543,22 +531,8 @@\n                       <Typography variant=\"body2\" color=\"textSecondary\">\r\n                         {event.description?.substring(0, 50)}...\r\n                       </Typography>\r\n                     </TableCell>\r\n-                    <TableCell>\r\n-                      {users[event.user_id] ? (\r\n-                        <>\r\n-                          <Typography fontWeight=\"medium\">\r\n-                            {users[event.user_id].full_name}\r\n-                          </Typography>\r\n-                          <Typography variant=\"body2\" color=\"textSecondary\">\r\n-                            {users[event.user_id].email}\r\n-                          </Typography>\r\n-                        </>\r\n-                      ) : (\r\n-                        <Typography>Loading user...</Typography>\r\n-                      )}\r\n-                    </TableCell>\r\n                     <TableCell>{event.location}</TableCell>\r\n                     <TableCell>\r\n                       <Chip label={event.category} size=\"small\" />\r\n                     </TableCell>\r\n@@ -578,42 +552,26 @@\n                         <Tooltip title=\"View Details\">\r\n                           <IconButton\r\n                             sx={{ color: themeColors.primary }}\r\n                             onClick={() => handleViewDetails(event.id)}\r\n+                            disabled={event.loading}\r\n                           >\r\n                             <Visibility />\r\n                           </IconButton>\r\n                         </Tooltip>\r\n \r\n-                        <Tooltip title=\"Edit Event\">\r\n-                          <IconButton\r\n-                            sx={{ color: '#1976D2' }}\r\n-                            onClick={() => handleEditEvent(event.id)}\r\n-                          >\r\n-                            <Edit />\r\n-                          </IconButton>\r\n-                        </Tooltip>\r\n-\r\n-                        {event.status === 'approved' && (\r\n-                          <Tooltip title=\"View Participants\">\r\n-                            <IconButton\r\n-                              sx={{ color: '#9C27B0' }}\r\n-                              onClick={() => fetchParticipants(event.id)}\r\n-                            >\r\n-                              <Badge badgeContent={event.participants_count || 0} color=\"secondary\">\r\n-                                <People />\r\n-                              </Badge>\r\n-                            </IconButton>\r\n-                          </Tooltip>\r\n-                        )}\r\n-\r\n                         {event.status !== 'approved' && (\r\n                           <Tooltip title=\"Approve\">\r\n                             <IconButton\r\n                               sx={{ color: '#4CAF50' }}\r\n                               onClick={() => updateStatus(event.id, 'approved')}\r\n+                              disabled={event.loading}\r\n                             >\r\n-                              <CheckCircle />\r\n+                              {event.loading ? (\r\n+                                <CircularProgress size={24} sx={{ color: '#4CAF50' }} />\r\n+                              ) : (\r\n+                                <CheckCircle />\r\n+                              )}\r\n                             </IconButton>\r\n                           </Tooltip>\r\n                         )}\r\n \r\n@@ -621,18 +579,24 @@\n                           <Tooltip title=\"Reject\">\r\n                             <IconButton\r\n                               sx={{ color: '#F44336' }}\r\n                               onClick={() => updateStatus(event.id, 'rejected')}\r\n+                              disabled={event.loading}\r\n                             >\r\n-                              <Cancel />\r\n+                              {event.loading ? (\r\n+                                <CircularProgress size={24} sx={{ color: '#F44336' }} />\r\n+                              ) : (\r\n+                                <Cancel />\r\n+                              )}\r\n                             </IconButton>\r\n                           </Tooltip>\r\n                         )}\r\n \r\n                         <Tooltip title=\"Delete\">\r\n                           <IconButton\r\n                             sx={{ color: '#F44336' }}\r\n                             onClick={() => setDeleteDialog({ open: true, eventId: event.id })}\r\n+                            disabled={event.loading}\r\n                           >\r\n                             <Delete />\r\n                           </IconButton>\r\n                         </Tooltip>\r\n@@ -686,9 +650,9 @@\n                       src={participant.profiles?.avatar_url} \r\n                       sx={{ mr: 2 }}\r\n                     />\r\n                     <ListItemText\r\n-                      primary={participant.profiles?.first_name || 'Unknown User'}\r\n+                      primary={participant.profiles?.full_name || 'Unknown User'}\r\n                       secondary={participant.profiles?.email}\r\n                     />\r\n                   </ListItem>\r\n                   {index < participantsDialog.participants.length - 1 && <Divider />}\r\n"
                },
                {
                    "date": 1748294168492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n \r\n     const updateStatus = async (id, newStatus) => {\r\n     try {\r\n       const { data, error } = await supabase\r\n-        .from('loan-form-request')\r\n+        .from('lon-form-request')\r\n         .update({ status: newStatus })\r\n         .eq('id', id)\r\n         .select();\r\n \r\n"
                }
            ],
            "date": 1748290857915,
            "name": "Commit-0",
            "content": "import { useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport supabase from '../../services/supabaseClient';\r\nimport {\r\n  Box,\r\n  Typography,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Button,\r\n  Chip,\r\n  CircularProgress,\r\n  IconButton,\r\n  Tooltip,\r\n  TextField,\r\n  InputAdornment,\r\n  Pagination,\r\n  Select,\r\n  MenuItem,\r\n  FormControl,\r\n  InputLabel,\r\n  Snackbar,\r\n  Alert,\r\n  Grid,\r\n  Card,\r\n  Avatar,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  DialogActions,\r\n  List,\r\n  ListItem,\r\n  ListItemText,\r\n  Divider,\r\n  Badge\r\n} from '@mui/material';\r\nimport {\r\n  CheckCircle,\r\n  Cancel,\r\n  MoreVert,\r\n  Visibility,\r\n  Refresh,\r\n  Search,\r\n  Event,\r\n  ThumbUp,\r\n  ThumbDown,\r\n  Delete,\r\n  Edit,\r\n  People,\r\n  Person\r\n} from '@mui/icons-material';\r\nimport { styled } from '@mui/material/styles';\r\nimport dayjs from 'dayjs';\r\n\r\nconst themeColors = {\r\n  primary: '#000000',\r\n  secondary: '#ffb300',\r\n  background: '#f5f5f5',\r\n  paper: '#FFFFFF',\r\n  text: '#000000',\r\n  border: '#e0e0e0'\r\n};\r\n\r\nconst StyledTableRow = styled(TableRow)(({ theme }) => ({\r\n  '&:nth-of-type(odd)': {\r\n    backgroundColor: '#fafafa',\r\n  },\r\n  '&:hover': {\r\n    backgroundColor: '#f0f0f0',\r\n  },\r\n}));\r\n\r\nconst statusConfig = {\r\n  pending: { color: 'warning', icon: <MoreVert sx={{ color: '#ffb300' }} />,\r\n  approved: { color: 'success', icon: <CheckCircle sx={{ color: '#4CAF50' }} /> },\r\n  rejected: { color: 'error', icon: <Cancel sx={{ color: '#F44336' }} /> }\r\n};\r\n\r\nexport default function AdminDashboard() {\r\n  const navigate = useNavigate();\r\n  const [events, setEvents] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [page, setPage] = useState(1);\r\n  const [rowsPerPage] = useState(8);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n  const [snackbar, setSnackbar] = useState({\r\n    open: false,\r\n    message: '',\r\n    severity: 'success'\r\n  });\r\n  const [participantsDialog, setParticipantsDialog] = useState({\r\n    open: false,\r\n    eventId: null,\r\n    participants: []\r\n  });\r\n  const [deleteDialog, setDeleteDialog] = useState({\r\n    open: false,\r\n    eventId: null\r\n  });\r\n  const [users, setUsers] = useState({});\r\n\r\n  const stats = {\r\n    total: events.length,\r\n    approved: events.filter(event => event.status === 'approved').length,\r\n    rejected: events.filter(event => event.status === 'rejected').length,\r\n    pending: events.filter(event => event.status === 'pending').length\r\n  };\r\n\r\n  const fetchEvents = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    try {\r\n      let query = supabase\r\n        .from('event-form-request')\r\n        .select('*')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (statusFilter !== 'all') query = query.eq('status', statusFilter);\r\n      if (searchTerm) query = query.ilike('title', `%${searchTerm}%`);\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) throw error;\r\n      setEvents(data || []);\r\n\r\n      // Fetch user details for each event\r\n      const userIds = [...new Set(data.map(event => event.user_id))];\r\n      await fetchUserDetails(userIds);\r\n    } catch (err) {\r\n      console.error('Error:', err.message);\r\n      setError(err.message);\r\n      showSnackbar(err.message, 'error');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const fetchUserDetails = async (userIds) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('profiles')\r\n        .select('id, full_name, email, avatar_url')\r\n        .in('id', userIds);\r\n\r\n      if (error) throw error;\r\n\r\n      const userMap = {};\r\n      data.forEach(user => {\r\n        userMap[user.id] = user;\r\n      });\r\n      setUsers(userMap);\r\n    } catch (err) {\r\n      console.error('Error fetching user details:', err.message);\r\n    }\r\n  };\r\n\r\n  const updateStatus = async (id, newStatus) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('event-form-request')\r\n        .update({ status: newStatus })\r\n        .eq('id', id)\r\n        .select();\r\n\r\n      if (error) throw error;\r\n\r\n      setEvents(prev => prev.map(event =>\r\n        event.id === id ? { ...event, status: newStatus } : event\r\n      ));\r\n      showSnackbar(`Status updated to ${newStatus}`, 'success');\r\n    } catch (err) {\r\n      console.error('Error:', err.message);\r\n      showSnackbar(`Update failed: ${err.message}`, 'error');\r\n    }\r\n  };\r\n\r\n  const deleteEvent = async () => {\r\n    try {\r\n      const { error } = await supabase\r\n        .from('event-form-request')\r\n        .delete()\r\n        .eq('id', deleteDialog.eventId);\r\n\r\n      if (error) throw error;\r\n\r\n      setEvents(prev => prev.filter(event => event.id !== deleteDialog.eventId));\r\n      showSnackbar('Event deleted successfully', 'success');\r\n      setDeleteDialog({ open: false, eventId: null });\r\n    } catch (err) {\r\n      console.error('Error:', err.message);\r\n      showSnackbar(`Delete failed: ${err.message}`, 'error');\r\n    }\r\n  };\r\n\r\n  const fetchParticipants = async (eventId) => {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('event_participants')\r\n        .select('*, profiles(full_name, email, avatar_url)')\r\n        .eq('event_id', eventId);\r\n\r\n      if (error) throw error;\r\n\r\n      setParticipantsDialog({\r\n        open: true,\r\n        eventId,\r\n        participants: data || []\r\n      });\r\n    } catch (err) {\r\n      console.error('Error:', err.message);\r\n      showSnackbar(`Failed to fetch participants: ${err.message}`, 'error');\r\n    }\r\n  };\r\n\r\n  const showSnackbar = (message, severity) => {\r\n    setSnackbar({ open: true, message, severity });\r\n  };\r\n\r\n  const handleCloseSnackbar = () => {\r\n    setSnackbar(prev => ({ ...prev, open: false }));\r\n  };\r\n\r\n  const handleViewDetails = (id) => {\r\n    if (!id) {\r\n      showSnackbar('Invalid event ID', 'error');\r\n      return;\r\n    }\r\n    navigate(`/admin/event-detail/${id}`);\r\n  };\r\n\r\n  const handleEditEvent = (id) => {\r\n    navigate(`/admin/edit-event/${id}`);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchEvents();\r\n  }, [statusFilter, searchTerm]);\r\n\r\n  const filteredEvents = events.filter(event =>\r\n    event.title?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    event.location?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    event.id?.toString().includes(searchTerm)\r\n  );\r\n\r\n  const paginatedEvents = filteredEvents.slice(\r\n    (page - 1) * rowsPerPage,\r\n    page * rowsPerPage\r\n  );\r\n\r\n  return (\r\n    <Box sx={{\r\n      p: 3,\r\n      backgroundColor: themeColors.background,\r\n      minHeight: '100vh',\r\n      color: themeColors.text,\r\n      margin: 0\r\n    }}>\r\n      {/* Header Section */}\r\n      <Box sx={{\r\n        display: 'flex',\r\n        justifyContent: 'space-between',\r\n        alignItems: 'center',\r\n        mb: 3,\r\n        padding: 0\r\n      }}>\r\n        <Typography variant=\"h4\" fontWeight=\"bold\" sx={{ color: 'white', backgroundColor: 'black', padding: 2, borderRadius: 2 }}>\r\n          <span style={{ color: themeColors.secondary }}>Events</span> Management Dashboard\r\n        </Typography>\r\n        <Button\r\n          variant=\"contained\"\r\n          sx={{\r\n            backgroundColor: themeColors.secondary,\r\n            color: themeColors.primary,\r\n            fontWeight: 'bold',\r\n            px: 2.5,\r\n            py: 1,\r\n            borderRadius: 2,\r\n            textTransform: 'none',\r\n            boxShadow: '0 2px 6px rgba(0,0,0,0.2)',\r\n            transition: 'all 0.3s ease',\r\n            '&:hover': {\r\n              backgroundColor: '#FFB300',\r\n              transform: 'scale(1.03)',\r\n              boxShadow: '0 4px 10px rgba(0,0,0,0.3)',\r\n            },\r\n            '&:active': {\r\n              transform: 'scale(0.98)',\r\n            },\r\n          }}\r\n          startIcon={loading ? <CircularProgress size={20} color=\"inherit\" /> : <Refresh />}\r\n          disabled={loading}\r\n          onClick={fetchEvents}\r\n        >\r\n          REFRESH\r\n        </Button>\r\n      </Box>\r\n\r\n      {/* Stats Cards */}\r\n      <Grid container spacing={2} sx={{ mb: 3 }}>\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card sx={{\r\n            p: 2,\r\n            backgroundColor: themeColors.paper,\r\n            borderLeft: `4px solid ${themeColors.secondary}`,\r\n            boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n          }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Avatar sx={{\r\n                bgcolor: '#f5f5f5',\r\n                mr: 2,\r\n                color: themeColors.secondary\r\n              }}>\r\n                <Event />\r\n              </Avatar>\r\n              <Box>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">Total Events</Typography>\r\n                <Typography variant=\"h5\" fontWeight=\"bold\">{stats.total}</Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card sx={{\r\n            p: 2,\r\n            backgroundColor: themeColors.paper,\r\n            borderLeft: '4px solid #4CAF50',\r\n            boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n          }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Avatar sx={{\r\n                bgcolor: '#f5f5f5',\r\n                mr: 2,\r\n                color: '#4CAF50'\r\n              }}>\r\n                <ThumbUp />\r\n              </Avatar>\r\n              <Box>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">Approved</Typography>\r\n                <Typography variant=\"h5\" fontWeight=\"bold\">{stats.approved}</Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card sx={{\r\n            p: 2,\r\n            backgroundColor: themeColors.paper,\r\n            borderLeft: '4px solid #F44336',\r\n            boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n          }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Avatar sx={{\r\n                bgcolor: '#f5f5f5',\r\n                mr: 2,\r\n                color: '#F44336'\r\n              }}>\r\n                <ThumbDown />\r\n              </Avatar>\r\n              <Box>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">Rejected</Typography>\r\n                <Typography variant=\"h5\" fontWeight=\"bold\">{stats.rejected}</Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} sm={6} md={3}>\r\n          <Card sx={{\r\n            p: 2,\r\n            backgroundColor: themeColors.paper,\r\n            borderLeft: '4px solid #2196F3',\r\n            boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n          }}>\r\n            <Box sx={{ display: 'flex', alignItems: 'center' }}>\r\n              <Avatar sx={{\r\n                bgcolor: '#f5f5f5',\r\n                mr: 2,\r\n                color: '#2196F3'\r\n              }}>\r\n                <Person />\r\n              </Avatar>\r\n              <Box>\r\n                <Typography variant=\"body2\" color=\"textSecondary\">Pending Review</Typography>\r\n                <Typography variant=\"h5\" fontWeight=\"bold\">{stats.pending}</Typography>\r\n              </Box>\r\n            </Box>\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* Filter Controls */}\r\n      <Paper sx={{\r\n        p: 2,\r\n        mb: 3,\r\n        display: 'flex',\r\n        gap: 2,\r\n        alignItems: 'center',\r\n        backgroundColor: themeColors.paper,\r\n        boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n      }}>\r\n        <TextField\r\n          variant=\"outlined\"\r\n          placeholder=\"Search events...\"\r\n          size=\"small\"\r\n          InputProps={{\r\n            startAdornment: (\r\n              <InputAdornment position=\"start\">\r\n                <Search sx={{ color: themeColors.secondary }} />\r\n              </InputAdornment>\r\n            ),\r\n            sx: {\r\n              '& .MuiOutlinedInput-notchedOutline': {\r\n                borderColor: themeColors.border\r\n              }\r\n            }\r\n          }}\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n          sx={{ flex: 1 }}\r\n        />\r\n\r\n        <FormControl size=\"small\" sx={{ minWidth: 180 }}>\r\n          <InputLabel>Filter by Status</InputLabel>\r\n          <Select\r\n            value={statusFilter}\r\n            onChange={(e) => setStatusFilter(e.target.value)}\r\n            label=\"Filter by Status\"\r\n            sx={{\r\n              color: themeColors,\r\n              '& .MuiOutlinedInput-notchedOutline': {\r\n                borderColor: 'black'\r\n              },\r\n              '& .MuiSvgIcon-root': {\r\n                color: themeColors.text\r\n              }\r\n            }}\r\n          >\r\n            <MenuItem value=\"all\">All Status</MenuItem>\r\n            <MenuItem value=\"pending\">Pending</MenuItem>\r\n            <MenuItem value=\"approved\">Approved</MenuItem>\r\n            <MenuItem value=\"rejected\">Rejected</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Paper>\r\n\r\n      {/* Main Content */}\r\n      {loading && !events.length ? (\r\n        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>\r\n          <CircularProgress sx={{ color: themeColors.secondary }} />\r\n        </Box>\r\n      ) : error ? (\r\n        <Paper sx={{\r\n          p: 3,\r\n          textAlign: 'center',\r\n          backgroundColor: themeColors.paper,\r\n          boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n        }}>\r\n          <Typography color=\"error\" gutterBottom>\r\n            Error Loading Data\r\n          </Typography>\r\n          <Typography sx={{ mb: 2 }}>{error}</Typography>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={fetchEvents}\r\n            sx={{\r\n              color: themeColors.secondary,\r\n              borderColor: themeColors.secondary\r\n            }}\r\n          >\r\n            Retry\r\n          </Button>\r\n        </Paper>\r\n      ) : events.length === 0 ? (\r\n        <Paper sx={{\r\n          p: 3,\r\n          textAlign: 'center',\r\n          backgroundColor: themeColors.paper,\r\n          boxShadow: '0 2px 8px rgba(0,0,0,0.1)'\r\n        }}>\r\n          <Typography variant=\"h6\">\r\n            No events found\r\n          </Typography>\r\n          <Typography color=\"textSecondary\">\r\n            {statusFilter !== 'all'\r\n              ? `No ${statusFilter} events available`\r\n              : 'No events have been submitted yet'}\r\n          </Typography>\r\n        </Paper>\r\n      ) : (\r\n        <>\r\n          <TableContainer\r\n            component={Paper}\r\n            sx={{\r\n              mb: 2,\r\n              backgroundColor: themeColors.paper,\r\n              boxShadow: '0 4px 20px rgba(0,0,0,0.3)'\r\n            }}\r\n          >\r\n            <Table>\r\n              <TableHead sx={{ bgcolor: themeColors.primary }}>\r\n                <TableRow>\r\n                  <TableCell sx={{ color: themeColors.secondary }}>ID</TableCell>\r\n                  <TableCell sx={{ color: themeColors.secondary }}>Event Title</TableCell>\r\n                  <TableCell sx={{ color: themeColors.secondary }}>Organizer</TableCell>\r\n                  <TableCell sx={{ color: themeColors.secondary }}>Location</TableCell>\r\n                  <TableCell sx={{ color: themeColors.secondary }}>Category</TableCell>\r\n                  <TableCell sx={{ color: themeColors.secondary }}>Status</TableCell>\r\n                  <TableCell sx={{ color: themeColors.secondary }}>Date</TableCell>\r\n                  <TableCell sx={{ color: themeColors.secondary }}>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {paginatedEvents.map((event) => (\r\n                  <StyledTableRow key={event.id}>\r\n                    <TableCell>#{event.id}</TableCell>\r\n                    <TableCell>\r\n                      <Typography fontWeight=\"medium\">\r\n                        {event.title}\r\n                      </Typography>\r\n                      <Typography variant=\"body2\" color=\"textSecondary\">\r\n                        {event.description?.substring(0, 50)}...\r\n                      </Typography>\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {users[event.user_id] ? (\r\n                        <>\r\n                          <Typography fontWeight=\"medium\">\r\n                            {users[event.user_id].full_name}\r\n                          </Typography>\r\n                          <Typography variant=\"body2\" color=\"textSecondary\">\r\n                            {users[event.user_id].email}\r\n                          </Typography>\r\n                        </>\r\n                      ) : (\r\n                        <Typography>Loading user...</Typography>\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell>{event.location}</TableCell>\r\n                    <TableCell>\r\n                      <Chip label={event.category} size=\"small\" />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Chip\r\n                        label={event.status}\r\n                        color={statusConfig[event.status]?.color || 'default'}\r\n                        icon={statusConfig[event.status]?.icon}\r\n                        size=\"small\"\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      {dayjs(event.created_at).format('DD MMM, YYYY')}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Box sx={{ display: 'flex', gap: 1 }}>\r\n                        <Tooltip title=\"View Details\">\r\n                          <IconButton\r\n                            sx={{ color: themeColors.primary }}\r\n                            onClick={() => handleViewDetails(event.id)}\r\n                          >\r\n                            <Visibility />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n\r\n                        <Tooltip title=\"Edit Event\">\r\n                          <IconButton\r\n                            sx={{ color: '#1976D2' }}\r\n                            onClick={() => handleEditEvent(event.id)}\r\n                          >\r\n                            <Edit />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n\r\n                        {event.status === 'approved' && (\r\n                          <Tooltip title=\"View Participants\">\r\n                            <IconButton\r\n                              sx={{ color: '#9C27B0' }}\r\n                              onClick={() => fetchParticipants(event.id)}\r\n                            >\r\n                              <Badge badgeContent={event.participants_count || 0} color=\"secondary\">\r\n                                <People />\r\n                              </Badge>\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        )}\r\n\r\n                        {event.status !== 'approved' && (\r\n                          <Tooltip title=\"Approve\">\r\n                            <IconButton\r\n                              sx={{ color: '#4CAF50' }}\r\n                              onClick={() => updateStatus(event.id, 'approved')}\r\n                            >\r\n                              <CheckCircle />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        )}\r\n\r\n                        {event.status !== 'rejected' && (\r\n                          <Tooltip title=\"Reject\">\r\n                            <IconButton\r\n                              sx={{ color: '#F44336' }}\r\n                              onClick={() => updateStatus(event.id, 'rejected')}\r\n                            >\r\n                              <Cancel />\r\n                            </IconButton>\r\n                          </Tooltip>\r\n                        )}\r\n\r\n                        <Tooltip title=\"Delete\">\r\n                          <IconButton\r\n                            sx={{ color: '#F44336' }}\r\n                            onClick={() => setDeleteDialog({ open: true, eventId: event.id })}\r\n                          >\r\n                            <Delete />\r\n                          </IconButton>\r\n                        </Tooltip>\r\n                      </Box>\r\n                    </TableCell>\r\n                  </StyledTableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n\r\n          <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>\r\n            <Pagination\r\n              count={Math.ceil(filteredEvents.length / rowsPerPage)}\r\n              page={page}\r\n              onChange={(_, value) => setPage(value)}\r\n              sx={{\r\n                '& .MuiPaginationItem-root': {\r\n                  color: themeColors.text\r\n                },\r\n                '& .MuiPaginationItem-page.Mui-selected': {\r\n                  backgroundColor: themeColors.secondary,\r\n                  color: themeColors.primary\r\n                }\r\n              }}\r\n            />\r\n          </Box>\r\n        </>\r\n      )}\r\n\r\n      {/* Participants Dialog */}\r\n      <Dialog\r\n        open={participantsDialog.open}\r\n        onClose={() => setParticipantsDialog({ open: false, eventId: null, participants: [] })}\r\n        maxWidth=\"sm\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle>\r\n          Participants for Event #{participantsDialog.eventId}\r\n          <Typography variant=\"subtitle2\" color=\"textSecondary\">\r\n            Total: {participantsDialog.participants.length}\r\n          </Typography>\r\n        </DialogTitle>\r\n        <DialogContent dividers>\r\n          <List>\r\n            {participantsDialog.participants.length > 0 ? (\r\n              participantsDialog.participants.map((participant, index) => (\r\n                <div key={participant.id}>\r\n                  <ListItem>\r\n                    <Avatar \r\n                      src={participant.profiles?.avatar_url} \r\n                      sx={{ mr: 2 }}\r\n                    />\r\n                    <ListItemText\r\n                      primary={participant.profiles?.full_name || 'Unknown User'}\r\n                      secondary={participant.profiles?.email}\r\n                    />\r\n                  </ListItem>\r\n                  {index < participantsDialog.participants.length - 1 && <Divider />}\r\n                </div>\r\n              ))\r\n            ) : (\r\n              <Typography variant=\"body2\" color=\"textSecondary\" sx={{ p: 2 }}>\r\n                No participants registered for this event yet.\r\n              </Typography>\r\n            )}\r\n          </List>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setParticipantsDialog({ open: false, eventId: null, participants: [] })}>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      {/* Delete Confirmation Dialog */}\r\n      <Dialog\r\n        open={deleteDialog.open}\r\n        onClose={() => setDeleteDialog({ open: false, eventId: null })}\r\n      >\r\n        <DialogTitle>Confirm Delete</DialogTitle>\r\n        <DialogContent>\r\n          <Typography>\r\n            Are you sure you want to delete this event? This action cannot be undone.\r\n          </Typography>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => setDeleteDialog({ open: false, eventId: null })}>\r\n            Cancel\r\n          </Button>\r\n          <Button \r\n            onClick={deleteEvent} \r\n            color=\"error\"\r\n            variant=\"contained\"\r\n          >\r\n            Delete\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n\r\n      <Snackbar\r\n        open={snackbar.open}\r\n        autoHideDuration={6000}\r\n        onClose={handleCloseSnackbar}\r\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\r\n      >\r\n        <Alert\r\n          onClose={handleCloseSnackbar}\r\n          severity={snackbar.severity}\r\n          sx={{ width: '100%' }}\r\n        >\r\n          {snackbar.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Box>\r\n  );\r\n}"
        }
    ]
}