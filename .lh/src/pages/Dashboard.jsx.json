{
    "sourceFile": "src/pages/Dashboard.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1748256800070,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748260087942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,9 +206,9 @@\n             description: 'Percentage of rejected events'\r\n           }\r\n         ]);\r\n \r\n-        // Prepare chart data (group by month)\r\n+        // chart data (group by month)\r\n         const monthlyData = userEvents.reduce((acc, event) => {\r\n           const month = dayjs(event.created_at).format('MMM');\r\n           if (!acc[month]) {\r\n             acc[month] = { approved: 0, pending: 0, rejected: 0 };\r\n"
                },
                {
                    "date": 1748260095052,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n           totalEvents: userEvents.length,\r\n           upcomingEvents: upcomingEvents.length\r\n         });\r\n \r\n-        // Prepare recent activities\r\n+        // recent activities\r\n         setRecentActivities(\r\n           userEvents.slice(0, 5).map((event) => ({\r\n             id: event.id,\r\n             title: event.title,\r\n"
                }
            ],
            "date": 1748256800070,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState, useContext } from 'react';\r\nimport {\r\n  Card,\r\n  Col,\r\n  Row,\r\n  Typography,\r\n  List,\r\n  Avatar,\r\n  Statistic,\r\n  Button,\r\n  Spin,\r\n  Space,\r\n  Progress,\r\n  Badge,\r\n  Tag,\r\n  Divider,\r\n  Tooltip,\r\n  Select,\r\n  Popover,\r\n  ConfigProvider\r\n} from 'antd';\r\nimport {\r\n  CheckCircleOutlined,\r\n  HourglassOutlined,\r\n  SolutionOutlined,\r\n  PlusCircleOutlined,\r\n  ArrowUpOutlined,\r\n  FileTextOutlined,\r\n  CalendarOutlined,\r\n  BarChartOutlined,\r\n  SyncOutlined,\r\n  UserOutlined,\r\n  ClockCircleOutlined,\r\n  PercentageOutlined,\r\n  SmileOutlined,\r\n  EnvironmentOutlined\r\n} from '@ant-design/icons';\r\nimport { AuthContext } from '../context/AuthContext';\r\nimport { Link } from 'react-router-dom';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport supabase from '../services/supabaseClient';\r\nimport Chart from 'react-apexcharts';\r\nimport '../App.css';\r\n\r\ndayjs.extend(relativeTime);\r\n\r\nconst { Title, Text } = Typography;\r\nconst { Option } = Select;\r\n\r\nconst professionalTheme = {\r\n  token: {\r\n    colorPrimary: '#ffb300',\r\n    colorBorder: '#d9d9d9',\r\n    colorText: '#1a1a1a',\r\n    colorTextSecondary: '#595959',\r\n    borderRadius: 8,\r\n    fontSize: 14,\r\n  },\r\n  components: {\r\n    Card: {\r\n      headerBg: '#000000',\r\n      headerColor: '#ffb300',\r\n      colorBgContainer: '#ffffff',\r\n      colorBorder: '#e8e8e8',\r\n      borderRadius: 12,\r\n    },\r\n    Button: {\r\n      colorPrimary: '#000000',\r\n      colorPrimaryHover: '#1a1a1a',\r\n      primaryColor: '#ffb300',\r\n      fontWeight: 500,\r\n    },\r\n    Table: {\r\n      headerBg: '#1a1a1a',\r\n      headerColor: '#ffb300',\r\n      borderColor: '#e8e8e8',\r\n    }\r\n  }\r\n};\r\n\r\nconst Dashboard = () => {\r\n  const { user } = useContext(AuthContext);\r\n  const [userName, setUserName] = useState('');\r\n  const [userAvatar, setUserAvatar] = useState('');\r\n  const [timeRange, setTimeRange] = useState('week');\r\n  const [loading, setLoading] = useState(true);\r\n  const [stats, setStats] = useState({\r\n    active: 0,\r\n    approved: 0,\r\n    pending: 0,\r\n    rejected: 0,\r\n    totalEvents: 0,\r\n    upcomingEvents: 0\r\n  });\r\n\r\n  const [recentActivities, setRecentActivities] = useState([]);\r\n  const [chartData, setChartData] = useState(null);\r\n  const [performanceMetrics, setPerformanceMetrics] = useState([]);\r\n\r\n  const getStatusColor = (status) => {\r\n    switch (status) {\r\n      case 'approved': return '#52c41a';\r\n      case 'pending': return '#faad14';\r\n      case 'rejected': return '#f5222d';\r\n      default: return '#d9d9d9';\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchUserProfile = async () => {\r\n      if (!user?.id) return;\r\n\r\n      try {\r\n        const { data, error } = await supabase\r\n          .from('profiles')\r\n          .select('first_name, last_name, avatar_url')\r\n          .eq('id', user.id)\r\n          .single();\r\n\r\n        if (error) throw error;\r\n\r\n        const fullName = `${data.first_name} ${data.last_name}`.trim();\r\n        setUserName(fullName);\r\n        setUserAvatar(data.avatar_url);\r\n      } catch (error) {\r\n        console.error('Error fetching user profile:', error);\r\n      }\r\n    };\r\n\r\n    const fetchDashboardData = async () => {\r\n      setLoading(true);\r\n      try {\r\n        if (!user?.id) return;\r\n\r\n        // Fetch events data\r\n        const { data: userEvents, error: eventsError } = await supabase\r\n          .from('event-form-request')\r\n          .select('*')\r\n          .eq('user_id', user.id)\r\n          .order('created_at', { ascending: false });\r\n\r\n        if (eventsError) throw eventsError;\r\n\r\n        // Calculate basic stats\r\n        const approvedEvents = userEvents.filter(event => event.status === 'approved');\r\n        const pendingEvents = userEvents.filter(event => event.status === 'pending');\r\n        const rejectedEvents = userEvents.filter(event => event.status === 'rejected');\r\n\r\n        // Calculate upcoming events\r\n        const today = new Date();\r\n        const upcomingEvents = approvedEvents.filter((event) => {\r\n          const eventDate = event.date_time ? new Date(event.date_time) : null;\r\n          return eventDate && eventDate > today;\r\n        });\r\n\r\n        // Set stats\r\n        setStats({\r\n          active: upcomingEvents.length,\r\n          approved: approvedEvents.length,\r\n          pending: pendingEvents.length,\r\n          rejected: rejectedEvents.length,\r\n          totalEvents: userEvents.length,\r\n          upcomingEvents: upcomingEvents.length\r\n        });\r\n\r\n        // Prepare recent activities\r\n        setRecentActivities(\r\n          userEvents.slice(0, 5).map((event) => ({\r\n            id: event.id,\r\n            title: event.title,\r\n            action: `Event ${event.status}`,\r\n            time: dayjs(event.created_at).fromNow(),\r\n            status: event.status,\r\n            date: event.date_time,\r\n            location: event.location\r\n          }))\r\n        );\r\n\r\n        // Prepare performance metrics\r\n        setPerformanceMetrics([\r\n          {\r\n            key: 'approvalRate',\r\n            title: 'Approval Rate',\r\n            value: approvedEvents.length > 0 ? \r\n              Math.round((approvedEvents.length / (approvedEvents.length + pendingEvents.length + rejectedEvents.length)) * 100) : 0,\r\n            icon: <CheckCircleOutlined />,\r\n            color: '#52c41a',\r\n            description: 'Percentage of approved events'\r\n          },\r\n          {\r\n            key: 'upcomingEvents',\r\n            title: 'Upcoming Events',\r\n            value: upcomingEvents.length,\r\n            icon: <CalendarOutlined />,\r\n            color: '#1890ff',\r\n            description: 'Events happening soon'\r\n          },\r\n          {\r\n            key: 'rejectionRate',\r\n            title: 'Rejection Rate',\r\n            value: rejectedEvents.length > 0 ? \r\n              Math.round((rejectedEvents.length / (approvedEvents.length + pendingEvents.length + rejectedEvents.length)) * 100) : 0,\r\n            icon: <PercentageOutlined />,\r\n            color: '#f5222d',\r\n            description: 'Percentage of rejected events'\r\n          }\r\n        ]);\r\n\r\n        // Prepare chart data (group by month)\r\n        const monthlyData = userEvents.reduce((acc, event) => {\r\n          const month = dayjs(event.created_at).format('MMM');\r\n          if (!acc[month]) {\r\n            acc[month] = { approved: 0, pending: 0, rejected: 0 };\r\n          }\r\n          acc[month][event.status]++;\r\n          return acc;\r\n        }, {});\r\n\r\n        const months = Object.keys(monthlyData);\r\n        const approvedData = months.map(month => monthlyData[month].approved);\r\n        const pendingData = months.map(month => monthlyData[month].pending);\r\n\r\n        setChartData({\r\n          options: {\r\n            chart: {\r\n              type: 'bar',\r\n              toolbar: { show: false }\r\n            },\r\n            colors: ['#52c41a', '#ffb300'],\r\n            xaxis: {\r\n              categories: months\r\n            }\r\n          },\r\n          series: [\r\n            {\r\n              name: 'Approved',\r\n              data: approvedData\r\n            },\r\n            {\r\n              name: 'Pending',\r\n              data: pendingData\r\n            }\r\n          ]\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error('Error fetching dashboard data:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchUserProfile();\r\n    fetchDashboardData();\r\n  }, [user?.id, timeRange]);\r\n\r\n  return (\r\n    <ConfigProvider theme={professionalTheme}>\r\n      <div style={{ \r\n        padding: '24px', \r\n        backgroundColor: '#f5f7fa', \r\n        minHeight: '100vh'\r\n      }}>\r\n        <Space direction=\"vertical\" size=\"large\" style={{ width: '100%' }}>\r\n          {/* Header Section */}\r\n          <Row justify=\"space-between\" align=\"middle\">\r\n            <Col>\r\n              <div style={{\r\n                backgroundColor: '#000000',\r\n                padding: '12px 20px',\r\n                borderRadius: '8px',\r\n                display: 'inline-flex',\r\n                alignItems: 'center',\r\n                gap: '12px'\r\n              }}>\r\n                <SmileOutlined style={{ color: '#ffb300', fontSize: '24px' }} />\r\n                <Title level={3} style={{ \r\n                  margin: 0, \r\n                  color: '#ffb300',\r\n                  fontWeight: 600\r\n                }}>\r\n                  Welcome, {userName || 'User'}\r\n                </Title>\r\n              </div>\r\n            </Col>\r\n\r\n            <Col>\r\n              <Space>\r\n                <Select\r\n                  value={timeRange}\r\n                  onChange={setTimeRange}\r\n                  style={{ width: 120 }}\r\n                >\r\n                  <Option value=\"week\">This Week</Option>\r\n                  <Option value=\"month\">This Month</Option>\r\n                  <Option value=\"year\">This Year</Option>\r\n                </Select>\r\n                <Link to=\"/new-event\">\r\n                  <Button \r\n                    type=\"primary\" \r\n                    icon={<PlusCircleOutlined />}\r\n                    style={{\r\n                      backgroundColor: '#000000',\r\n                      color: '#ffb300'\r\n                    }}\r\n                  >\r\n                    New Event\r\n                  </Button>\r\n                </Link>\r\n              </Space>\r\n            </Col>\r\n          </Row>\r\n\r\n          {/* Stats Cards */}\r\n          <Row gutter={[24, 24]}>\r\n            <Col xs={24} sm={12} lg={6}>\r\n              <Card \r\n                title=\"Total Events\" \r\n                extra={<CalendarOutlined style={{ color: '#ffb300', fontSize: '24px' }} />}\r\n                className=\"custom-card\"\r\n              >\r\n                <Statistic\r\n                  value={stats.totalEvents}\r\n                  valueStyle={{ fontSize: '28px', fontWeight: 600 }}\r\n                />\r\n                <Divider style={{ margin: '12px 0' }} />\r\n                <Text type=\"secondary\">All your events</Text>\r\n              </Card>\r\n            </Col>\r\n\r\n            <Col xs={24} sm={12} lg={6}>\r\n              <Card \r\n                title=\"Upcoming Events\" \r\n                extra={<SolutionOutlined style={{ color: '#ffb300', fontSize: '24px' }} />}\r\n                className=\"custom-card\"\r\n              >\r\n                <Statistic\r\n                  value={stats.upcomingEvents}\r\n                  valueStyle={{ fontSize: '28px', fontWeight: 600, color: '#1890ff' }}\r\n                />\r\n                <Divider style={{ margin: '12px 0' }} />\r\n                <Progress\r\n                  percent={stats.totalEvents > 0 ? Math.round((stats.upcomingEvents / stats.totalEvents) * 100) : 0}\r\n                  showInfo={false}\r\n                  strokeColor=\"#1890ff\"\r\n                />\r\n              </Card>\r\n            </Col>\r\n\r\n            <Col xs={24} sm={12} lg={6}>\r\n              <Card \r\n                title=\"Approved Events\" \r\n                extra={<CheckCircleOutlined style={{ color: '#ffb300', fontSize: '24px' }} />}\r\n                className=\"custom-card\"\r\n              >\r\n                <Statistic\r\n                  value={stats.approved}\r\n                  valueStyle={{ fontSize: '28px', fontWeight: 600, color: '#52c41a' }}\r\n                />\r\n                <Divider style={{ margin: '12px 0' }} />\r\n                <Space>\r\n                  <ArrowUpOutlined style={{ color: '#52c41a' }} />\r\n                  <Text>\r\n                    {stats.totalEvents > 0 \r\n                      ? Math.round((stats.approved / stats.totalEvents) * 100) \r\n                      : 0}%\r\n                  </Text>\r\n                </Space>\r\n              </Card>\r\n            </Col>\r\n\r\n            <Col xs={24} sm={12} lg={6}>\r\n              <Card \r\n                title=\"Pending Events\" \r\n                extra={<HourglassOutlined style={{ color: '#ffb300', fontSize: '24px' }} />}\r\n                className=\"custom-card\"\r\n              >\r\n                <Statistic\r\n                  value={stats.pending}\r\n                  valueStyle={{ fontSize: '28px', fontWeight: 600, color: '#faad14' }}\r\n                />\r\n                <Divider style={{ margin: '12px 0' }} />\r\n                <SyncOutlined spin style={{ color: '#faad14' }} />\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n\r\n          {/* Charts and Metrics */}\r\n          <Row gutter={[24, 24]}>\r\n            <Col xs={24} lg={16}>\r\n              <Card\r\n                title={\r\n                  <Space>\r\n                    <BarChartOutlined style={{ color: '#ffb300', fontSize: '24px' }} />\r\n                    <Text strong style={{color: 'white'}}>Events Activity</Text>\r\n                  </Space>\r\n                }\r\n                loading={loading}\r\n              >\r\n                {chartData && (\r\n                  <Chart\r\n                    options={chartData.options}\r\n                    series={chartData.series}\r\n                    type=\"bar\"\r\n                    height={300}\r\n                  />\r\n                )}\r\n              </Card>\r\n            </Col>\r\n\r\n            <Col xs={24} lg={8}>\r\n              <Card\r\n                title={\r\n                  <Space>\r\n                    <CheckCircleOutlined style={{ color: '#ffb300', fontSize: '24px' }} />\r\n                    <Text strong style={{color: 'white'}}>Event Metrics</Text>\r\n                  </Space>\r\n                }\r\n              >\r\n                <Space direction=\"vertical\" style={{ width: '100%' }}>\r\n                  {performanceMetrics.map(metric => (\r\n                    <div key={metric.key} style={{ marginBottom: 16 }}>\r\n                      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                        <Text>\r\n                          {metric.icon} {metric.title}\r\n                        </Text>\r\n                        <Text strong style={{ color: metric.color }}>\r\n                          {metric.value}{metric.unit || ''}\r\n                        </Text>\r\n                      </div>\r\n                      <Progress\r\n                        percent={metric.key === 'upcomingEvents' ? \r\n                          (stats.totalEvents > 0 ? Math.round((metric.value / stats.totalEvents) * 100) : 0) : \r\n                          metric.value}\r\n                        showInfo={false}\r\n                        strokeColor={metric.color}\r\n                      />\r\n                      <Text type=\"secondary\" style={{ fontSize: 12 }}>\r\n                        {metric.description}\r\n                      </Text>\r\n                    </div>\r\n                  ))}\r\n                </Space>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n\r\n          {/* Recent Activity */}\r\n          <Card\r\n            title={\r\n              <Space>\r\n                <FileTextOutlined style={{ color: '#ffb300', fontSize: '24px' }} />\r\n                <Text strong style={{color: 'white'}}>Recent Events</Text>\r\n              </Space>\r\n            }\r\n          >\r\n            <List\r\n              itemLayout=\"horizontal\"\r\n              dataSource={recentActivities}\r\n              loading={loading}\r\n              renderItem={(item) => (\r\n                <List.Item>\r\n                  <List.Item.Meta\r\n                    avatar={<Avatar src={userAvatar} icon={<UserOutlined />} />}\r\n                    title={\r\n                      <Space>\r\n                        <Text strong>{item.title}</Text>\r\n                        <Badge\r\n                          color={getStatusColor(item.status)}\r\n                          text={item.status}\r\n                        />\r\n                      </Space>\r\n                    }\r\n                    description={\r\n                      <Space direction=\"vertical\" size={0}>\r\n                        <Text>{item.action}</Text>\r\n                        <Text type=\"secondary\" style={{ fontSize: 12 }}>\r\n                          {item.time} • {item.location}\r\n                        </Text>\r\n                        {item.date && (\r\n                          <Text type=\"secondary\" style={{ fontSize: 12 }}>\r\n                            <CalendarOutlined /> {dayjs(item.date).format('MMM D, YYYY h:mm A')}\r\n                          </Text>\r\n                        )}\r\n                      </Space>\r\n                    }\r\n                  />\r\n                </List.Item>\r\n              )}\r\n            />\r\n          </Card>\r\n        </Space>\r\n      </div>\r\n    </ConfigProvider>\r\n  );\r\n};\r\n\r\nexport default Dashboard;"
        }
    ]
}