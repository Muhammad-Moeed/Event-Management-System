{
    "sourceFile": "src/pages/MyEventRequest.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1748255846193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748260058559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n   const handleAddUser = async () => {\r\n     try {\r\n       const values = await form.validateFields();\r\n       \r\n-      // Add user to event in supabase\r\n+      // Add user\r\n       const { error } = await supabase\r\n         .from('event_participants')\r\n         .insert([{\r\n           event_id: selectedEvent.id,\r\n"
                },
                {
                    "date": 1748260070128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,10 +166,9 @@\n \r\n   const handleAddUser = async () => {\r\n     try {\r\n       const values = await form.validateFields();\r\n-      \r\n-      // Add user\r\n+    \r\n       const { error } = await supabase\r\n         .from('event_participants')\r\n         .insert([{\r\n           event_id: selectedEvent.id,\r\n"
                },
                {
                    "date": 1748296302833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -447,9 +447,9 @@\n             />\r\n           )}\r\n         </Card>\r\n \r\n-        {/* Add User Modal */}\r\n+        {/* User Modal */}\r\n         <Modal\r\n           title={`Add User to ${selectedEvent?.title}`}\r\n           visible={isAddUserModalVisible}\r\n           onOk={handleAddUser}\r\n"
                }
            ],
            "date": 1748255846193,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState, useContext, useCallback } from 'react';\r\nimport {\r\n  Table,\r\n  Button,\r\n  Typography,\r\n  Tag,\r\n  Tooltip,\r\n  Input,\r\n  Space,\r\n  Dropdown,\r\n  Menu,\r\n  Skeleton,\r\n  Grid,\r\n  ConfigProvider,\r\n  Card,\r\n  Modal,\r\n  Form,\r\n  message\r\n} from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport {\r\n  PlusOutlined,\r\n  PlusCircleOutlined,\r\n  SearchOutlined,\r\n  ReloadOutlined,\r\n  FileTextOutlined,\r\n  ClockCircleOutlined,\r\n  CheckCircleOutlined,\r\n  CloseCircleOutlined,\r\n  MoreOutlined,\r\n  UserAddOutlined\r\n} from '@ant-design/icons';\r\nimport supabase from '../services/supabaseClient';\r\nimport { AuthContext } from '../context/AuthContext';\r\n\r\nconst { Title, Text } = Typography;\r\nconst { useBreakpoint } = Grid;\r\n\r\nconst themeConfig = {\r\n  token: {\r\n    colorPrimary: '#ffb300',\r\n    colorBorder: '#d9d9d9',\r\n    colorText: '#1a1a1a',\r\n    colorTextSecondary: '#595959',\r\n    borderRadius: 6,\r\n    fontSize: 14,\r\n    wireframe: false\r\n  },\r\n  components: {\r\n    Table: {\r\n      headerBg: '#1a1a1a',\r\n      headerColor: '#ffb300',\r\n      headerSplitColor: '#333333',\r\n      borderColor: '#d9d9d9',\r\n      headerBorderRadius: 0,\r\n      cellPaddingBlock: 12,\r\n      cellPaddingInline: 16,\r\n      rowHoverBg: '#fafafa',\r\n      cellFontSize: 13,\r\n    },\r\n    Button: {\r\n      colorPrimary: '#1a1a1a',\r\n      colorPrimaryHover: '#000000',\r\n      colorPrimaryActive: '#000000',\r\n      primaryColor: '#ffb300',\r\n      fontWeight: 500,\r\n      controlHeight: 36,\r\n    },\r\n    Input: {\r\n      colorBorder: '#d9d9d9',\r\n      hoverBorderColor: '#ffb300',\r\n      activeBorderColor: '#ffb300',\r\n    },\r\n    Card: {\r\n      colorBorder: '#d9d9d9',\r\n      borderRadius: 8,\r\n      boxShadow: '0 1px 2px 0 rgba(0,0,0,0.05)'\r\n    }\r\n  }\r\n};\r\n\r\nconst statusConfig = {\r\n  approved: {\r\n    color: 'green',\r\n    icon: <CheckCircleOutlined />,\r\n    text: 'Approved'\r\n  },\r\n  pending: {\r\n    color: 'orange',\r\n    icon: <ClockCircleOutlined />,\r\n    text: 'Pending'\r\n  },\r\n  rejected: {\r\n    color: 'red',\r\n    icon: <CloseCircleOutlined />,\r\n    text: 'Rejected'\r\n  },\r\n  default: {\r\n    color: 'blue',\r\n    icon: <ClockCircleOutlined />,\r\n    text: 'Processing'\r\n  }\r\n};\r\n\r\nconst MyEventRequest = () => {\r\n  const { user } = useContext(AuthContext);\r\n  const [events, setEvents] = useState([]);\r\n  const [filteredEvents, setFilteredEvents] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [isAddUserModalVisible, setIsAddUserModalVisible] = useState(false);\r\n  const [selectedEvent, setSelectedEvent] = useState(null);\r\n  const [form] = Form.useForm();\r\n  const screens = useBreakpoint();\r\n\r\n  const fetchEvents = useCallback(async () => {\r\n    if (!user?.id) return;\r\n    setLoading(true);\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('event-form-request')\r\n        .select('*')\r\n        .eq('user_id', user.id)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) throw error;\r\n\r\n      setEvents(data || []);\r\n      setFilteredEvents(data || []);\r\n    } catch (error) {\r\n      console.error('Error fetching events:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [user?.id]);\r\n\r\n  useEffect(() => {\r\n    fetchEvents();\r\n  }, [fetchEvents]);\r\n\r\n  useEffect(() => {\r\n    const term = searchTerm.trim().toLowerCase();\r\n    if (!term) {\r\n      setFilteredEvents(events);\r\n      return;\r\n    }\r\n    const filtered = events.filter((event) => {\r\n      return (\r\n        event.title?.toLowerCase().includes(term) ||\r\n        event.status?.toLowerCase().includes(term) ||\r\n        event.category?.toLowerCase().includes(term) ||\r\n        event.id?.toString().includes(term)\r\n      );\r\n    });\r\n    setFilteredEvents(filtered);\r\n  }, [searchTerm, events]);\r\n\r\n  const handleRefresh = () => {\r\n    fetchEvents();\r\n  };\r\n\r\n  const showAddUserModal = (event) => {\r\n    setSelectedEvent(event);\r\n    setIsAddUserModalVisible(true);\r\n  };\r\n\r\n  const handleAddUser = async () => {\r\n    try {\r\n      const values = await form.validateFields();\r\n      \r\n      // Add user to event in supabase\r\n      const { error } = await supabase\r\n        .from('event_participants')\r\n        .insert([{\r\n          event_id: selectedEvent.id,\r\n          full_name: values.fullName,\r\n          email: values.email,\r\n          phone: values.phone,\r\n          invited_by: user.id\r\n        }]);\r\n\r\n      if (error) throw error;\r\n\r\n      message.success('User added to event successfully!');\r\n      setIsAddUserModalVisible(false);\r\n      form.resetFields();\r\n    } catch (error) {\r\n      console.error('Error adding user:', error);\r\n      message.error('Failed to add user to event');\r\n    }\r\n  };\r\n\r\n  const columns = [\r\n    {\r\n      title: 'EVENT ID',\r\n      dataIndex: 'id',\r\n      key: 'id',\r\n      render: (id) => <Text strong>#{id}</Text>,\r\n      responsive: ['md'],\r\n    },\r\n    {\r\n      title: 'TITLE',\r\n      dataIndex: 'title',\r\n      key: 'title',\r\n      render: (title) => (\r\n        <Text strong style={{ color: '#1a1a1a' }}>\r\n          {title || '-'}\r\n        </Text>\r\n      ),\r\n    },\r\n    {\r\n      title: 'CATEGORY',\r\n      dataIndex: 'category',\r\n      key: 'category',\r\n      render: (category) => (\r\n        <Tag color=\"blue\" style={{ textTransform: 'capitalize' }}>\r\n          {category || '-'}\r\n        </Tag>\r\n      ),\r\n    },\r\n    {\r\n      title: 'DATE & TIME',\r\n      dataIndex: 'date_time',\r\n      key: 'date_time',\r\n      render: (date) => (\r\n        <Text>\r\n          {date ? new Date(date).toLocaleString('en-US', {\r\n            year: 'numeric',\r\n            month: 'short',\r\n            day: 'numeric',\r\n            hour: '2-digit',\r\n            minute: '2-digit'\r\n          }) : '-'}\r\n        </Text>\r\n      ),\r\n      responsive: ['md'],\r\n    },\r\n    {\r\n      title: 'STATUS',\r\n      dataIndex: 'status',\r\n      key: 'status',\r\n      filters: [\r\n        { text: 'Approved', value: 'approved' },\r\n        { text: 'Rejected', value: 'rejected' },\r\n        { text: 'Pending', value: 'pending' },\r\n      ],\r\n      onFilter: (value, record) => record.status?.toLowerCase() === value,\r\n      render: (status) => {\r\n        if (!status) status = 'pending';\r\n        const statusLower = status.toLowerCase();\r\n        const config = statusConfig[statusLower] || statusConfig.default;\r\n\r\n        return (\r\n          <Tag\r\n            color={config.color}\r\n            icon={config.icon}\r\n            style={{\r\n              borderRadius: '4px',\r\n              padding: '0 8px',\r\n              fontWeight: 500,\r\n              margin: 0,\r\n              fontSize: '12px'\r\n            }}\r\n          >\r\n            {config.text}\r\n          </Tag>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      title: 'ACTIONS',\r\n      key: 'action',\r\n      render: (_, record) => (\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            icon={<UserAddOutlined />}\r\n            onClick={() => showAddUserModal(record)}\r\n            disabled={record.status !== 'approved'}\r\n            style={{\r\n              backgroundColor: record.status === 'approved' ? '#1a1a1a' : '#f5f5f5',\r\n              color: record.status === 'approved' ? '#ffb300' : '#d9d9d9',\r\n              borderColor: record.status === 'approved' ? '#1a1a1a' : '#d9d9d9'\r\n            }}\r\n          >\r\n            Add User\r\n          </Button>\r\n          <Dropdown\r\n            overlay={\r\n              <Menu>\r\n                <Menu.Item key=\"view\" icon={<FileTextOutlined />}>\r\n                  <Link to={`/event-detail/${record.id}`}>View Details</Link>\r\n                </Menu.Item>\r\n                <Menu.Item key=\"refresh\" icon={<ReloadOutlined />} onClick={handleRefresh}>\r\n                  Refresh Status\r\n                </Menu.Item>\r\n              </Menu>\r\n            }\r\n            placement=\"bottomRight\"\r\n            trigger={['click']}\r\n          >\r\n            <Button shape=\"circle\" icon={<MoreOutlined />} />\r\n          </Dropdown>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  return (\r\n    <ConfigProvider theme={themeConfig}>\r\n      <div style={{\r\n        padding: screens.xs ? '16px' : '24px',\r\n        maxWidth: '1440px',\r\n        margin: '0 auto'\r\n      }}>\r\n        <div style={{\r\n          display: 'flex',\r\n          flexDirection: screens.xs ? 'column' : 'row',\r\n          justifyContent: 'space-between',\r\n          alignItems: screens.xs ? 'flex-start' : 'center',\r\n          gap: '16px',\r\n          marginBottom: '24px',\r\n        }}>\r\n          <Title level={3} style={{ fontWeight: 600, backgroundColor: 'black', color: '#ffb300', padding: '8px', borderRadius: '8px', display: 'inline-block' }}>\r\n            My Event Requests</Title>\r\n\r\n          <Space wrap style={{ width: screens.xs ? '100%' : 'auto' }}>\r\n            <Link to=\"/new-event\" style={{ width: screens.xs ? '100%' : 'auto' }}>\r\n              <Button\r\n                type=\"primary\"\r\n                icon={<PlusCircleOutlined />}\r\n                block={screens.xs}\r\n                style={{\r\n                  backgroundColor: '#000000',\r\n                  color: '#ffb300',\r\n                  borderRadius: '8px',\r\n                  padding: '0 20px',\r\n                  height: '40px',\r\n                  fontWeight: 500,\r\n                  border: '1px solid #333333'\r\n                }}\r\n              >\r\n                Create New Event\r\n              </Button>\r\n            </Link>\r\n            <Button\r\n              icon={<ReloadOutlined />}\r\n              onClick={handleRefresh}\r\n              loading={loading}\r\n              style={{\r\n                border: '1px solid #333333'\r\n              }}\r\n            >\r\n              Refresh\r\n            </Button>\r\n          </Space>\r\n        </div>\r\n\r\n        <Input\r\n          placeholder=\"Search by ID, title, category or status...\"\r\n          prefix={<SearchOutlined style={{ color: '#bfbfbf' }} />}\r\n          suffix={\r\n            searchTerm && (\r\n              <Button\r\n                type=\"text\"\r\n                size=\"small\"\r\n                onClick={() => setSearchTerm('')}\r\n                style={{ color: '#8c8c8c' }}\r\n              >\r\n                Clear\r\n              </Button>\r\n            )\r\n          }\r\n          value={searchTerm}\r\n          onChange={(e) => setSearchTerm(e.target.value)}\r\n          allowClear\r\n          style={{\r\n            width: '100%',\r\n            maxWidth: '500px',\r\n            borderRadius: '8px',\r\n            border: '1px solid #333333',\r\n            marginBottom: '24px'\r\n          }}\r\n        />\r\n\r\n        <Card\r\n          bordered={false}\r\n          style={{\r\n            boxShadow: '0 1px 2px 0 rgba(0,0,0,0.05)',\r\n            padding: 0\r\n          }}\r\n          bodyStyle={{ padding: 0 }}\r\n        >\r\n          {loading ? (\r\n            <Skeleton active paragraph={{ rows: 6 }} />\r\n          ) : (\r\n            <Table\r\n              columns={columns}\r\n              dataSource={filteredEvents}\r\n              rowKey=\"id\"\r\n              pagination={{\r\n                pageSize: 10,\r\n                showSizeChanger: true,\r\n                showTotal: (total) => `Total ${total} events`,\r\n                pageSizeOptions: ['10', '25', '50'],\r\n                size: 'small'\r\n              }}\r\n              scroll={{ x: true }}\r\n              size=\"middle\"\r\n              bordered\r\n              locale={{\r\n                emptyText: (\r\n                  <div style={{\r\n                    padding: '40px 16px',\r\n                    textAlign: 'center',\r\n                    color: '#595959'\r\n                  }}>\r\n                    <FileTextOutlined style={{\r\n                      fontSize: '48px',\r\n                      color: '#d9d9d9',\r\n                      marginBottom: '16px'\r\n                    }} />\r\n                    <div style={{ marginBottom: '16px' }}>\r\n                      <Text strong style={{ display: 'block', marginBottom: '4px' }}>\r\n                        No events found\r\n                      </Text>\r\n                      <Text type=\"secondary\" style={{ fontSize: '13px' }}>\r\n                        You haven't created any events yet\r\n                      </Text>\r\n                    </div>\r\n                    <Link to=\"/new-event\">\r\n                      <Button\r\n                        type=\"primary\"\r\n                        icon={<PlusOutlined />}\r\n                        style={{\r\n                          minWidth: '180px',\r\n                          backgroundColor: '#000000',\r\n                          color: '#ffb300',\r\n                          border: '1px solid #333333'\r\n                        }}\r\n                      >\r\n                        Create New Event\r\n                      </Button>\r\n                    </Link>\r\n                  </div>\r\n                )\r\n              }}\r\n            />\r\n          )}\r\n        </Card>\r\n\r\n        {/* Add User Modal */}\r\n        <Modal\r\n          title={`Add User to ${selectedEvent?.title}`}\r\n          visible={isAddUserModalVisible}\r\n          onOk={handleAddUser}\r\n          onCancel={() => {\r\n            setIsAddUserModalVisible(false);\r\n            form.resetFields();\r\n          }}\r\n          okText=\"Add User\"\r\n          cancelText=\"Cancel\"\r\n        >\r\n          <Form form={form} layout=\"vertical\">\r\n            <Form.Item\r\n              name=\"fullName\"\r\n              label=\"Full Name\"\r\n              rules={[{ required: true, message: 'Please enter full name' }]}\r\n            >\r\n              <Input placeholder=\"Enter user's full name\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"email\"\r\n              label=\"Email\"\r\n              rules={[\r\n                { required: true, message: 'Please enter email' },\r\n                { type: 'email', message: 'Please enter a valid email' }\r\n              ]}\r\n            >\r\n              <Input placeholder=\"Enter user's email\" />\r\n            </Form.Item>\r\n            <Form.Item\r\n              name=\"phone\"\r\n              label=\"Phone Number\"\r\n              rules={[{ required: true, message: 'Please enter phone number' }]}\r\n            >\r\n              <Input placeholder=\"Enter user's phone number\" />\r\n            </Form.Item>\r\n          </Form>\r\n        </Modal>\r\n      </div>\r\n    </ConfigProvider>\r\n  );\r\n};\r\n\r\nexport default MyEventRequest;"
        }
    ]
}