{
    "sourceFile": "src/pages/EventDetail.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1748256030570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1748256310063,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n         setLoading(true);\r\n         \r\n         // Fetch event details\r\n         const { data: eventData, error: eventError } = await supabase\r\n-          .from('events')\r\n+          .from('event')\r\n           .select('*')\r\n           .eq('id', id)\r\n           .single();\r\n \r\n"
                },
                {
                    "date": 1748258431519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n         setLoading(true);\r\n         \r\n         // Fetch event details\r\n         const { data: eventData, error: eventError } = await supabase\r\n-          .from('event')\r\n+          .from('events')\r\n           .select('*')\r\n           .eq('id', id)\r\n           .single();\r\n \r\n"
                },
                {
                    "date": 1748258475168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n         setLoading(true);\r\n         \r\n         // Fetch event details\r\n         const { data: eventData, error: eventError } = await supabase\r\n-          .from('events')\r\n+          .from('event-form-request')\r\n           .select('*')\r\n           .eq('id', id)\r\n           .single();\r\n \r\n"
                },
                {
                    "date": 1748260003936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,8 @@\n     const fetchEventData = async () => {\r\n       try {\r\n         setLoading(true);\r\n         \r\n-        // Fetch event details\r\n         const { data: eventData, error: eventError } = await supabase\r\n           .from('event-form-request')\r\n           .select('*')\r\n           .eq('id', id)\r\n"
                },
                {
                    "date": 1748260016369,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n import { useParams, useNavigate } from 'react-router-dom';\r\n import { useEffect, useState, useRef } from 'react';\r\n-import { \r\n-  Card, \r\n-  Spin, \r\n-  Alert, \r\n-  Typography, \r\n-  Row, \r\n-  Col,  \r\n-  Tag, \r\n-  Button, \r\n+import {\r\n+  Card,\r\n+  Spin,\r\n+  Alert,\r\n+  Typography,\r\n+  Row,\r\n+  Col,\r\n+  Tag,\r\n+  Button,\r\n   Space,\r\n   Descriptions,\r\n   Image,\r\n   Modal,\r\n@@ -19,9 +19,9 @@\n   Avatar,\r\n   Divider,\r\n   Badge\r\n } from 'antd';\r\n-import { \r\n+import {\r\n   ArrowLeftOutlined,\r\n   CheckCircleOutlined,\r\n   ClockCircleOutlined,\r\n   CloseCircleOutlined,\r\n@@ -69,9 +69,9 @@\n   useEffect(() => {\r\n     const fetchEventData = async () => {\r\n       try {\r\n         setLoading(true);\r\n-        \r\n+\r\n         const { data: eventData, error: eventError } = await supabase\r\n           .from('event-form-request')\r\n           .select('*')\r\n           .eq('id', id)\r\n@@ -114,9 +114,9 @@\n \r\n   const getStatusTag = () => {\r\n     const status = event?.status?.toLowerCase() || 'pending';\r\n     const config = statusConfig[status] || statusConfig.pending;\r\n-    \r\n+\r\n     return (\r\n       <Tag\r\n         color={config.color}\r\n         icon={config.icon}\r\n@@ -172,12 +172,12 @@\n   ];\r\n \r\n   if (loading) {\r\n     return (\r\n-      <div style={{ \r\n-        display: 'flex', \r\n-        justifyContent: 'center', \r\n-        alignItems: 'center', \r\n+      <div style={{\r\n+        display: 'flex',\r\n+        justifyContent: 'center',\r\n+        alignItems: 'center',\r\n         height: '80vh'\r\n       }}>\r\n         <Spin size=\"large\" tip=\"Loading event details...\" />\r\n       </div>\r\n@@ -192,10 +192,10 @@\n           description={error}\r\n           type=\"error\"\r\n           showIcon\r\n           action={\r\n-            <Button \r\n-              type=\"primary\" \r\n+            <Button\r\n+              type=\"primary\"\r\n               onClick={() => window.location.reload()}\r\n             >\r\n               Retry\r\n             </Button>\r\n@@ -206,20 +206,20 @@\n   }\r\n \r\n   if (!event) {\r\n     return (\r\n-      <div style={{ \r\n-        textAlign: 'center', \r\n+      <div style={{\r\n+        textAlign: 'center',\r\n         padding: '40px 16px'\r\n       }}>\r\n         <Title level={3} style={{ marginBottom: 16 }}>\r\n           Event Not Found\r\n         </Title>\r\n         <Text type=\"secondary\" style={{ display: 'block', marginBottom: 24 }}>\r\n           The requested event does not exist or you don't have permission to view it.\r\n         </Text>\r\n-        <Button \r\n-          type=\"primary\" \r\n+        <Button\r\n+          type=\"primary\"\r\n           icon={<ArrowLeftOutlined />}\r\n           onClick={() => navigate(-1)}\r\n         >\r\n           Go Back\r\n@@ -231,20 +231,20 @@\n   return (\r\n     <div style={{ maxWidth: 1200, margin: '0 auto', padding: 24 }}>\r\n       {/* Header Section */}\r\n       <div style={{ marginBottom: 24 }}>\r\n-        <Button \r\n-          type=\"text\" \r\n-          icon={<ArrowLeftOutlined />} \r\n+        <Button\r\n+          type=\"text\"\r\n+          icon={<ArrowLeftOutlined />}\r\n           onClick={() => navigate(-1)}\r\n           style={{ marginBottom: 16 }}\r\n         >\r\n           Back to Events\r\n         </Button>\r\n-        \r\n-        <div style={{ \r\n-          display: 'flex', \r\n-          justifyContent: 'space-between', \r\n+\r\n+        <div style={{\r\n+          display: 'flex',\r\n+          justifyContent: 'space-between',\r\n           alignItems: 'flex-end',\r\n           marginBottom: 24\r\n         }}>\r\n           <div>\r\n@@ -260,10 +260,10 @@\n               </Text>\r\n               {getStatusTag()}\r\n             </Space>\r\n           </div>\r\n-          \r\n-          <Button \r\n+\r\n+          <Button\r\n             type=\"primary\"\r\n             icon={<TeamOutlined />}\r\n             disabled={event.status !== 'approved'}\r\n             onClick={() => navigate(`/events/${id}/participants`)}\r\n@@ -327,11 +327,11 @@\n           >\r\n             {creator ? (\r\n               <div>\r\n                 <Space align=\"start\" style={{ marginBottom: 16 }}>\r\n-                  <Avatar \r\n-                    src={creator.avatar_url} \r\n-                    size={64} \r\n+                  <Avatar\r\n+                    src={creator.avatar_url}\r\n+                    size={64}\r\n                     icon={<UserOutlined />}\r\n                   />\r\n                   <div>\r\n                     <Title level={5} style={{ margin: 0 }}>{creator.full_name}</Title>\r\n@@ -342,10 +342,10 @@\n                       </div>\r\n                     )}\r\n                   </div>\r\n                 </Space>\r\n-                <Button \r\n-                  type=\"dashed\" \r\n+                <Button\r\n+                  type=\"dashed\"\r\n                   block\r\n                   onClick={() => navigate(`/profile/${creator.id}`)}\r\n                 >\r\n                   View Profile\r\n@@ -365,10 +365,10 @@\n               </Space>\r\n             }\r\n             extra={\r\n               event.status === 'approved' && (\r\n-                <Button \r\n-                  type=\"link\" \r\n+                <Button\r\n+                  type=\"link\"\r\n                   size=\"small\"\r\n                   onClick={() => navigate(`/events/${id}/participants`)}\r\n                 >\r\n                   View All\r\n@@ -400,10 +400,10 @@\n                 <Text type=\"secondary\" style={{ display: 'block' }}>\r\n                   No participants yet\r\n                 </Text>\r\n                 {event.status === 'approved' && (\r\n-                  <Button \r\n-                    type=\"dashed\" \r\n+                  <Button\r\n+                    type=\"dashed\"\r\n                     style={{ marginTop: 16 }}\r\n                     onClick={() => navigate(`/events/${id}/add-participant`)}\r\n                   >\r\n                     Add Participant\r\n"
                },
                {
                    "date": 1748260023004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,9 +81,8 @@\n         if (!eventData) throw new Error('Event not found');\r\n \r\n         setEvent(eventData);\r\n \r\n-        // Fetch creator profile separately\r\n         const { data: creatorData, error: creatorError } = await supabase\r\n           .from('profiles')\r\n           .select('id, full_name, email, phone, avatar_url')\r\n           .eq('id', eventData.user_id)\r\n"
                }
            ],
            "date": 1748256030570,
            "name": "Commit-0",
            "content": "import { useParams, useNavigate } from 'react-router-dom';\r\nimport { useEffect, useState, useRef } from 'react';\r\nimport { \r\n  Card, \r\n  Spin, \r\n  Alert, \r\n  Typography, \r\n  Row, \r\n  Col,  \r\n  Tag, \r\n  Button, \r\n  Space,\r\n  Descriptions,\r\n  Image,\r\n  Modal,\r\n  message,\r\n  ConfigProvider,\r\n  Table,\r\n  Avatar,\r\n  Divider,\r\n  Badge\r\n} from 'antd';\r\nimport { \r\n  ArrowLeftOutlined,\r\n  CheckCircleOutlined,\r\n  ClockCircleOutlined,\r\n  CloseCircleOutlined,\r\n  UserOutlined,\r\n  CalendarOutlined,\r\n  EnvironmentOutlined,\r\n  TagOutlined,\r\n  TeamOutlined,\r\n  MailOutlined,\r\n  PhoneOutlined,\r\n  FileTextOutlined\r\n} from '@ant-design/icons';\r\nimport supabase from '../services/supabaseClient';\r\nimport moment from 'moment';\r\n\r\nconst { Title, Text } = Typography;\r\n\r\nconst statusConfig = {\r\n  approved: {\r\n    color: 'green',\r\n    icon: <CheckCircleOutlined />,\r\n    text: 'APPROVED'\r\n  },\r\n  pending: {\r\n    color: 'orange',\r\n    icon: <ClockCircleOutlined />,\r\n    text: 'PENDING'\r\n  },\r\n  rejected: {\r\n    color: 'red',\r\n    icon: <CloseCircleOutlined />,\r\n    text: 'REJECTED'\r\n  }\r\n};\r\n\r\nconst EventDetailPage = () => {\r\n  const { id } = useParams();\r\n  const navigate = useNavigate();\r\n  const [event, setEvent] = useState(null);\r\n  const [creator, setCreator] = useState(null);\r\n  const [participants, setParticipants] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchEventData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        \r\n        // Fetch event details\r\n        const { data: eventData, error: eventError } = await supabase\r\n          .from('events')\r\n          .select('*')\r\n          .eq('id', id)\r\n          .single();\r\n\r\n        if (eventError) throw eventError;\r\n        if (!eventData) throw new Error('Event not found');\r\n\r\n        setEvent(eventData);\r\n\r\n        // Fetch creator profile separately\r\n        const { data: creatorData, error: creatorError } = await supabase\r\n          .from('profiles')\r\n          .select('id, full_name, email, phone, avatar_url')\r\n          .eq('id', eventData.user_id)\r\n          .single();\r\n\r\n        if (creatorError) console.error('Error fetching creator:', creatorError);\r\n        setCreator(creatorData || null);\r\n\r\n        // Fetch participants\r\n        const { data: participantsData, error: participantsError } = await supabase\r\n          .from('event_participants')\r\n          .select('id, full_name, email, phone, created_at')\r\n          .eq('event_id', id)\r\n          .order('created_at', { ascending: false });\r\n\r\n        if (participantsError) throw participantsError;\r\n        setParticipants(participantsData || []);\r\n\r\n      } catch (err) {\r\n        setError(err.message);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchEventData();\r\n  }, [id]);\r\n\r\n  const getStatusTag = () => {\r\n    const status = event?.status?.toLowerCase() || 'pending';\r\n    const config = statusConfig[status] || statusConfig.pending;\r\n    \r\n    return (\r\n      <Tag\r\n        color={config.color}\r\n        icon={config.icon}\r\n        style={{\r\n          fontWeight: 600,\r\n          fontSize: 12,\r\n          padding: '4px 12px',\r\n          borderRadius: 20,\r\n          textTransform: 'uppercase',\r\n          border: 'none'\r\n        }}\r\n      >\r\n        {config.text}\r\n      </Tag>\r\n    );\r\n  };\r\n\r\n  const participantColumns = [\r\n    {\r\n      title: 'Participant',\r\n      dataIndex: 'full_name',\r\n      key: 'name',\r\n      render: (text, record) => (\r\n        <Space>\r\n          <Avatar src={record.avatar_url} icon={<UserOutlined />} />\r\n          <Text strong>{text}</Text>\r\n        </Space>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Contact',\r\n      key: 'contact',\r\n      render: (_, record) => (\r\n        <div>\r\n          <div><MailOutlined /> {record.email}</div>\r\n          {record.phone && <div><PhoneOutlined /> {record.phone}</div>}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      title: 'Registered On',\r\n      dataIndex: 'created_at',\r\n      key: 'date',\r\n      render: (date) => moment(date).format('MMM D, YYYY h:mm A'),\r\n    },\r\n    {\r\n      title: 'Status',\r\n      key: 'status',\r\n      render: () => (\r\n        <Badge status=\"success\" text=\"Confirmed\" />\r\n      ),\r\n    },\r\n  ];\r\n\r\n  if (loading) {\r\n    return (\r\n      <div style={{ \r\n        display: 'flex', \r\n        justifyContent: 'center', \r\n        alignItems: 'center', \r\n        height: '80vh'\r\n      }}>\r\n        <Spin size=\"large\" tip=\"Loading event details...\" />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <div style={{ padding: 24 }}>\r\n        <Alert\r\n          message=\"Error Loading Event\"\r\n          description={error}\r\n          type=\"error\"\r\n          showIcon\r\n          action={\r\n            <Button \r\n              type=\"primary\" \r\n              onClick={() => window.location.reload()}\r\n            >\r\n              Retry\r\n            </Button>\r\n          }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!event) {\r\n    return (\r\n      <div style={{ \r\n        textAlign: 'center', \r\n        padding: '40px 16px'\r\n      }}>\r\n        <Title level={3} style={{ marginBottom: 16 }}>\r\n          Event Not Found\r\n        </Title>\r\n        <Text type=\"secondary\" style={{ display: 'block', marginBottom: 24 }}>\r\n          The requested event does not exist or you don't have permission to view it.\r\n        </Text>\r\n        <Button \r\n          type=\"primary\" \r\n          icon={<ArrowLeftOutlined />}\r\n          onClick={() => navigate(-1)}\r\n        >\r\n          Go Back\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={{ maxWidth: 1200, margin: '0 auto', padding: 24 }}>\r\n      {/* Header Section */}\r\n      <div style={{ marginBottom: 24 }}>\r\n        <Button \r\n          type=\"text\" \r\n          icon={<ArrowLeftOutlined />} \r\n          onClick={() => navigate(-1)}\r\n          style={{ marginBottom: 16 }}\r\n        >\r\n          Back to Events\r\n        </Button>\r\n        \r\n        <div style={{ \r\n          display: 'flex', \r\n          justifyContent: 'space-between', \r\n          alignItems: 'flex-end',\r\n          marginBottom: 24\r\n        }}>\r\n          <div>\r\n            <Title level={2} style={{ marginBottom: 8 }}>\r\n              {event.title}\r\n            </Title>\r\n            <Space size=\"middle\">\r\n              <Text type=\"secondary\">\r\n                <CalendarOutlined /> {moment(event.date_time).format('MMMM D, YYYY')}\r\n              </Text>\r\n              <Text type=\"secondary\">\r\n                <EnvironmentOutlined /> {event.location}\r\n              </Text>\r\n              {getStatusTag()}\r\n            </Space>\r\n          </div>\r\n          \r\n          <Button \r\n            type=\"primary\"\r\n            icon={<TeamOutlined />}\r\n            disabled={event.status !== 'approved'}\r\n            onClick={() => navigate(`/events/${id}/participants`)}\r\n          >\r\n            Manage Participants\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <Row gutter={[24, 24]}>\r\n        {/* Event Details Column */}\r\n        <Col xs={24} md={16}>\r\n          <Card\r\n            title={\r\n              <Space>\r\n                <FileTextOutlined />\r\n                <Text strong>Event Details</Text>\r\n              </Space>\r\n            }\r\n          >\r\n            <Descriptions column={1}>\r\n              <Descriptions.Item label=\"Description\">\r\n                {event.description || 'No description provided'}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item label=\"Date & Time\">\r\n                {moment(event.date_time).format('dddd, MMMM D, YYYY [at] h:mm A')}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item label=\"Location\">\r\n                {event.location}\r\n              </Descriptions.Item>\r\n              <Descriptions.Item label=\"Category\">\r\n                <Tag icon={<TagOutlined />} color=\"blue\">\r\n                  {event.category}\r\n                </Tag>\r\n              </Descriptions.Item>\r\n            </Descriptions>\r\n\r\n            {event.image_url && (\r\n              <div style={{ marginTop: 24 }}>\r\n                <Image\r\n                  src={event.image_url}\r\n                  alt=\"Event banner\"\r\n                  style={{ borderRadius: 8 }}\r\n                />\r\n              </div>\r\n            )}\r\n          </Card>\r\n        </Col>\r\n\r\n        {/* Organizer & Participants Column */}\r\n        <Col xs={24} md={8}>\r\n          {/* Organizer Card */}\r\n          <Card\r\n            title={\r\n              <Space>\r\n                <UserOutlined />\r\n                <Text strong>Organizer</Text>\r\n              </Space>\r\n            }\r\n            style={{ marginBottom: 24 }}\r\n          >\r\n            {creator ? (\r\n              <div>\r\n                <Space align=\"start\" style={{ marginBottom: 16 }}>\r\n                  <Avatar \r\n                    src={creator.avatar_url} \r\n                    size={64} \r\n                    icon={<UserOutlined />}\r\n                  />\r\n                  <div>\r\n                    <Title level={5} style={{ margin: 0 }}>{creator.full_name}</Title>\r\n                    <Text type=\"secondary\">{creator.email}</Text>\r\n                    {creator.phone && (\r\n                      <div style={{ marginTop: 4 }}>\r\n                        <PhoneOutlined /> {creator.phone}\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </Space>\r\n                <Button \r\n                  type=\"dashed\" \r\n                  block\r\n                  onClick={() => navigate(`/profile/${creator.id}`)}\r\n                >\r\n                  View Profile\r\n                </Button>\r\n              </div>\r\n            ) : (\r\n              <Text type=\"secondary\">Organizer information not available</Text>\r\n            )}\r\n          </Card>\r\n\r\n          {/* Participants Card */}\r\n          <Card\r\n            title={\r\n              <Space>\r\n                <TeamOutlined />\r\n                <Text strong>Participants ({participants.length})</Text>\r\n              </Space>\r\n            }\r\n            extra={\r\n              event.status === 'approved' && (\r\n                <Button \r\n                  type=\"link\" \r\n                  size=\"small\"\r\n                  onClick={() => navigate(`/events/${id}/participants`)}\r\n                >\r\n                  View All\r\n                </Button>\r\n              )\r\n            }\r\n          >\r\n            {participants.length > 0 ? (\r\n              <>\r\n                <Table\r\n                  columns={participantColumns}\r\n                  dataSource={participants.slice(0, 3)}\r\n                  rowKey=\"id\"\r\n                  pagination={false}\r\n                  showHeader={false}\r\n                  size=\"small\"\r\n                />\r\n                {participants.length > 3 && (\r\n                  <div style={{ textAlign: 'center', marginTop: 16 }}>\r\n                    <Text type=\"secondary\">\r\n                      + {participants.length - 3} more participants\r\n                    </Text>\r\n                  </div>\r\n                )}\r\n              </>\r\n            ) : (\r\n              <div style={{ textAlign: 'center', padding: '16px 0' }}>\r\n                <TeamOutlined style={{ fontSize: 32, color: '#d9d9d9', marginBottom: 8 }} />\r\n                <Text type=\"secondary\" style={{ display: 'block' }}>\r\n                  No participants yet\r\n                </Text>\r\n                {event.status === 'approved' && (\r\n                  <Button \r\n                    type=\"dashed\" \r\n                    style={{ marginTop: 16 }}\r\n                    onClick={() => navigate(`/events/${id}/add-participant`)}\r\n                  >\r\n                    Add Participant\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            )}\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EventDetailPage;"
        }
    ]
}